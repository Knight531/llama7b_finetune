[
    {
        "instruction": "question: How many heads of the departments are older than 56 ?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT count(*) FROM head WHERE age  >  56."
    },
    {
        "instruction": "question: List the name, born state and age of the heads of departments ordered by age., database: Database: department_management. t0: department(c0: department_id, c1: name (State), c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT name ,  born_state ,  age FROM head ORDER BY age."
    },
    {
        "instruction": "question: List the creation year, name and budget of each department., database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT creation ,  name ,  budget_in_billions FROM department."
    },
    {
        "instruction": "question: What are the maximum and minimum budget of the departments?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department."
    },
    {
        "instruction": "question: What is the average number of employees of the departments whose rank is between 10 and 15?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15."
    },
    {
        "instruction": "question: What are the names of the heads who are born outside the California state?, database: Database: department_management. t0: department(c0: department_id, c1: name (State), c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state (California), c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT name FROM head WHERE born_state != 'California'."
    },
    {
        "instruction": "question: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?, database: Database: department_management. t0: department(c0: department_id, c1: name (State), c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state (Alabama), c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'."
    },
    {
        "instruction": "question: What are the names of the states where at least 3 heads were born?, database: Database: department_management. t0: department(c0: department_id, c1: name (State), c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3."
    },
    {
        "instruction": "question: In which year were most departments established?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting (Yes)) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'."
    },
    {
        "instruction": "question: How many acting statuses are there?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT temporary_acting) FROM management."
    },
    {
        "instruction": "question: How many departments are led by heads who are not mentioned?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management)."
    },
    {
        "instruction": "question: What are the distinct ages of the heads who are acting?, database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'."
    },
    {
        "instruction": "question: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born., database: Database: department_management. t0: department(c0: department_id, c1: name (Homeland Security, Treasury), c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'."
    },
    {
        "instruction": "question: Which department has more than 1 head at a time? List the id, name and the number of heads., database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1."
    },
    {
        "instruction": "question: Which head's name has the substring 'Ha'? List the id and name., database: Database: department_management. t0: department(c0: department_id, c1: name, c2: creation, c3: ranking, c4: budget_in_billions, c5: num_employees). t1: head(c0: head_id, c1: name, c2: born_state, c3: age). t2: management(c0: department_id, c1: head_id, c2: temporary_acting) (c1) refers to t1(c0), (c0) refers to t0(c0).",
        "input": "",
        "output": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'."
    },
    {
        "instruction": "question: How many farms are there?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM farm."
    },
    {
        "instruction": "question: Count the number of farms., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM farm."
    },
    {
        "instruction": "question: List the total number of horses on farms in ascending order., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC."
    },
    {
        "instruction": "question: What is the total horses record for each farm, sorted ascending?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC."
    },
    {
        "instruction": "question: What are the hosts of competitions whose theme is not \"Aliens\"?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme (Aliens), c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'."
    },
    {
        "instruction": "question: Return the hosts of competitions for which the theme is not Aliens?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme (Aliens), c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'."
    },
    {
        "instruction": "question: What are the themes of farm competitions sorted by year in ascending order?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC."
    },
    {
        "instruction": "question: Return the themes of farm competitions, sorted by year ascending., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC."
    },
    {
        "instruction": "question: What is the average number of working horses of farms with more than 5000 total number of horses?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000."
    },
    {
        "instruction": "question: Give the average number of working horses on farms with more than 5000 total horses., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000."
    },
    {
        "instruction": "question: What are the maximum and minimum number of cows across all farms., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT max(Cows) ,  min(Cows) FROM farm."
    },
    {
        "instruction": "question: Return the maximum and minimum number of cows across all farms., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT max(Cows) ,  min(Cows) FROM farm."
    },
    {
        "instruction": "question: How many different statuses do cities have?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT Status) FROM city."
    },
    {
        "instruction": "question: Count the number of different statuses., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT Status) FROM city."
    },
    {
        "instruction": "question: List official names of cities in descending order of population., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name FROM city ORDER BY Population DESC."
    },
    {
        "instruction": "question: What are the official names of cities, ordered descending by population?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name FROM city ORDER BY Population DESC."
    },
    {
        "instruction": "question: List the official name and status of the city with the largest population., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the official name and status of the city with the most residents?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the years and the official names of the host cities of competitions., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID."
    },
    {
        "instruction": "question: Give the years and official names of the cities of each competition., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID."
    },
    {
        "instruction": "question: Show the official names of the cities that have hosted more than one competition., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1."
    },
    {
        "instruction": "question: What are the official names of cities that have hosted more than one competition?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1."
    },
    {
        "instruction": "question: Show the status of the city that has hosted the greatest number of competitions., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the status of the city that has hosted the most competitions?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Please show the themes of competitions with host cities having populations larger than 1000., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000."
    },
    {
        "instruction": "question: What are the themes of competitions that have corresponding host cities with more than 1000 residents?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000."
    },
    {
        "instruction": "question: Please show the different statuses of cities and the average population of cities with each status., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status ,  avg(Population) FROM city GROUP BY Status."
    },
    {
        "instruction": "question: What are the statuses and average populations of each city?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status ,  avg(Population) FROM city GROUP BY Status."
    },
    {
        "instruction": "question: Please show the different statuses, ordered by the number of cities that have each., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC."
    },
    {
        "instruction": "question: Return the different statuses of cities, ascending by frequency., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC."
    },
    {
        "instruction": "question: List the most common type of Status across cities., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the most common status across all cities?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the official names of cities that have not held any competition., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)."
    },
    {
        "instruction": "question: What are the official names of cities that have not hosted a farm competition?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)."
    },
    {
        "instruction": "question: Show the status shared by cities with population bigger than 1500 and smaller than 500., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500."
    },
    {
        "instruction": "question: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500."
    },
    {
        "instruction": "question: Find the official names of cities with population bigger than 1500 or smaller than 500., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500."
    },
    {
        "instruction": "question: What are the official names of cities that have population over 1500 or less than 500?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status, c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500."
    },
    {
        "instruction": "question: Show the census ranking of cities whose status are not \"Village\"., database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status (Village), c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"."
    },
    {
        "instruction": "question: What are the census rankings of cities that do not have the status \"Village\"?, database: Database: farm. t0: city(c0: city_id, c1: official_name, c2: status (Village), c3: area_km_2, c4: population, c5: census_ranking). t1: farm(c0: farm_id, c1: year, c2: total_horses, c3: working_horses, c4: total_cattle, c5: oxen, c6: bulls, c7: cows, c8: pigs, c9: sheep_and_goats). t2: farm_competition(c0: competition_id, c1: year, c2: theme, c3: host_city_id, c4: hosts) (c3) refers to t0(c0). t3: competition_record(c0: competition_id, c1: farm_id, c2: rank) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"."
    },
    {
        "instruction": "question: which course has most number of registered students?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the name of the course with the most registered students?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: what is id of students who registered some courses but the least number of courses in these students?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1."
    },
    {
        "instruction": "question: What are the ids of the students who registered for some courses but had the least number of courses for all students?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1."
    },
    {
        "instruction": "question: what are the first name and last name of all candidates?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id."
    },
    {
        "instruction": "question: What are the first and last names of all the candidates?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id."
    },
    {
        "instruction": "question: List the id of students who never attends courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)."
    },
    {
        "instruction": "question: What are the  ids of every student who has never attended a course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)."
    },
    {
        "instruction": "question: List the id of students who attended some courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_attendance."
    },
    {
        "instruction": "question: What are the ids of all students who have attended at least one course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_attendance."
    },
    {
        "instruction": "question: What are the ids of all students for courses and what are the names of those courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id."
    },
    {
        "instruction": "question: What is detail of the student who most recently registered course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1."
    },
    {
        "instruction": "question: What details do we have on the students who registered for courses most recently?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1."
    },
    {
        "instruction": "question: How many students attend course English?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name (English), c2: course_description (English), c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"."
    },
    {
        "instruction": "question: How many students are attending English courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name (English), c2: course_description (English), c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"."
    },
    {
        "instruction": "question: How many courses do the student whose id is 171 attend?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171."
    },
    {
        "instruction": "question: How many courses does the student with id 171 actually attend?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171."
    },
    {
        "instruction": "question: Find id of the candidate whose email is stanley.monahan@example.org?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address (stanley.monahan@example.org), c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"."
    },
    {
        "instruction": "question: What is the id of the candidate whose email is stanley.monahan@example.org?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address (stanley.monahan@example.org), c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"."
    },
    {
        "instruction": "question: Find id of the candidate who most recently accessed the course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the id of the candidate who most recently accessed the course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1."
    },
    {
        "instruction": "question: What is detail of the student who registered the most number of courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the details of the student who registered for the most number of courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the id of students who registered some courses and the number of their registered courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id."
    },
    {
        "instruction": "question: For every student who is registered for some course, how many courses are they registered for?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id."
    },
    {
        "instruction": "question: How many registed students do each course have? List course name and the number of their registered students?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id."
    },
    {
        "instruction": "question: For each course id, how many students are registered and what are the course names?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id."
    },
    {
        "instruction": "question: Find id of candidates whose assessment code is \"Pass\"?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code (Pass)).",
        "input": "",
        "output": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"."
    },
    {
        "instruction": "question: What are the ids of the candidates that have an outcome code of Pass?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code (Pass)).",
        "input": "",
        "output": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"."
    },
    {
        "instruction": "question: Find the cell mobile number of the candidates whose assessment code is \"Fail\"?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code (Fail)).",
        "input": "",
        "output": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"."
    },
    {
        "instruction": "question: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code (Fail)).",
        "input": "",
        "output": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"."
    },
    {
        "instruction": "question: What are the id of students who registered course 301?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301."
    },
    {
        "instruction": "question: What are the ids of the students who registered for course 301?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301."
    },
    {
        "instruction": "question: What is the id of the student who most recently registered course 301?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the ids of the students who registered for course 301 most recently?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1."
    },
    {
        "instruction": "question: Find distinct cities of addresses of people?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id."
    },
    {
        "instruction": "question: What are the different cities where people live?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id."
    },
    {
        "instruction": "question: Find distinct cities of address of students?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id."
    },
    {
        "instruction": "question: What are the different cities where students live?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id."
    },
    {
        "instruction": "question: List the names of courses in alphabetical order?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT course_name FROM courses ORDER BY course_name."
    },
    {
        "instruction": "question: What are the names of the courses in alphabetical order?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT course_name FROM courses ORDER BY course_name."
    },
    {
        "instruction": "question: List the first names of people in alphabetical order?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT first_name FROM people ORDER BY first_name."
    },
    {
        "instruction": "question: What are the first names of the people in alphabetical order?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT first_name FROM people ORDER BY first_name."
    },
    {
        "instruction": "question: What are the id of students who registered courses or attended courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance."
    },
    {
        "instruction": "question: What are the ids of the students who either registered or attended a course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance."
    },
    {
        "instruction": "question: Find the id of courses which are registered or attended by student whose id is 121?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121."
    },
    {
        "instruction": "question: What are the ids of the courses that are registered or attended by the student whose id is 121?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121."
    },
    {
        "instruction": "question: What are all info of students who registered courses but not attended courses?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)."
    },
    {
        "instruction": "question: What are all details of the students who registered but did not attend any course?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name, c2: course_description, c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)."
    },
    {
        "instruction": "question: List the id of students who registered course statistics in the order of registration date., database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name (statistics), c2: course_description (statistics), c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date."
    },
    {
        "instruction": "question: What are the ids of the students who registered course statistics by order of registration date?, database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name (statistics), c2: course_description (statistics), c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date."
    },
    {
        "instruction": "question: List the id of students who attended  statistics courses in the order of attendance date., database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name (statistics), c2: course_description (statistics), c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance."
    },
    {
        "instruction": "question: What are the ids of the students who attended courses in the statistics department in order of attendance date., database: Database: student_assessment. t0: addresses(c0: address_id, c1: line_1, c2: line_2, c3: city, c4: zip_postcode, c5: state_province_county, c6: country). t1: people(c0: person_id, c1: first_name, c2: middle_name, c3: last_name, c4: cell_mobile_number, c5: email_address, c6: login_name, c7: password). t2: students(c0: student_id, c1: student_details). t3: courses(c0: course_id, c1: course_name (statistics), c2: course_description (statistics), c3: other_details). t4: people_addresses(c0: person_address_id, c1: person_id, c2: address_id, c3: date_from, c4: date_to). t5: student_course_registrations(c0: student_id, c1: course_id, c2: registration_date). t6: student_course_attendance(c0: student_id, c1: course_id, c2: date_of_attendance). t7: candidates(c0: candidate_id, c1: candidate_details). t8: candidate_assessments(c0: candidate_id, c1: qualification, c2: assessment_date, c3: asessment_outcome_code).",
        "input": "",
        "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance."
    },
    {
        "instruction": "question: Give me the dates when the max temperature was higher than 85., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date FROM weather WHERE max_temperature_f  >  85."
    },
    {
        "instruction": "question: What are the dates with a maximum temperature higher than 85?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date FROM weather WHERE max_temperature_f  >  85."
    },
    {
        "instruction": "question: What are the names of stations that have latitude lower than 37.5?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT name FROM station WHERE lat  <  37.5."
    },
    {
        "instruction": "question: What are the names of all stations with a latitude smaller than 37.5?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT name FROM station WHERE lat  <  37.5."
    },
    {
        "instruction": "question: For each city, return the highest latitude among its stations., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT city ,  max(lat) FROM station GROUP BY city."
    },
    {
        "instruction": "question: For each city, what is the highest latitude for its stations?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT city ,  max(lat) FROM station GROUP BY city."
    },
    {
        "instruction": "question: Give me the start station and end station for the trips with the three oldest id., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3."
    },
    {
        "instruction": "question: What is the station station and end station for the trips with the three smallest ids?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3."
    },
    {
        "instruction": "question: What is the average latitude and longitude of stations located in San Jose city?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Jose), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"."
    },
    {
        "instruction": "question: What is the average latitude and longitude in San Jose?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Jose), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"."
    },
    {
        "instruction": "question: What is the id of the trip that has the shortest duration?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM trip ORDER BY duration LIMIT 1."
    },
    {
        "instruction": "question: What is the id of the shortest trip?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM trip ORDER BY duration LIMIT 1."
    },
    {
        "instruction": "question: What is the total and maximum duration of trips with bike id 636?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636."
    },
    {
        "instruction": "question: What is the total and maximum duration for all trips with the bike id 636?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636."
    },
    {
        "instruction": "question: For each zip code, return the average mean temperature of August there., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code."
    },
    {
        "instruction": "question: For each zip code, what is the average mean temperature for all dates that start with '8'?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code."
    },
    {
        "instruction": "question: From the trip record, find the number of unique bikes., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(DISTINCT bike_id) FROM trip."
    },
    {
        "instruction": "question: How many different bike ids are there?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(DISTINCT bike_id) FROM trip."
    },
    {
        "instruction": "question: What is the number of distinct cities the stations are located at?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(DISTINCT city) FROM station."
    },
    {
        "instruction": "question: How many different cities have these stations?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(DISTINCT city) FROM station."
    },
    {
        "instruction": "question: How many stations does Mountain View city has?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Mountain View), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"."
    },
    {
        "instruction": "question: How many stations are in Mountain View?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Mountain View), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"."
    },
    {
        "instruction": "question: Return the unique name for stations that have ever had 7 bikes available., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7."
    },
    {
        "instruction": "question: What are the different names for each station that has ever had 7 bikes available?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7."
    },
    {
        "instruction": "question: Which start station had the most trips starting from August? Give me the name and id of the station., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the start station's name and id for the one that had the most start trips in August?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which bike traveled the most often in zip code 94002?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the id of the bike that traveled the most in 94002?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many days had both mean humidity above 50 and mean visibility above 8?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8."
    },
    {
        "instruction": "question: What is the number of days that had an average humity above 50 and an average visibility above 8?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8."
    },
    {
        "instruction": "question: What is the latitude, longitude, city of the station from which the shortest trip started?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1."
    },
    {
        "instruction": "question: What is the latitude, longitude, and city of the station from which the trip with smallest duration started?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1."
    },
    {
        "instruction": "question: What are the ids of stations that are located in San Francisco and have average bike availability above 10., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Francisco), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10."
    },
    {
        "instruction": "question: What are the ids of the stations in San Francisco that normally have more than 10 bikes available?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Francisco), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10."
    },
    {
        "instruction": "question: What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"."
    },
    {
        "instruction": "question: What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"."
    },
    {
        "instruction": "question: What is the 3 most common cloud cover rates in the region of zip code 94107?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3."
    },
    {
        "instruction": "question: What are the 3 most common cloud covers in the zip code of 94107?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3."
    },
    {
        "instruction": "question: What is the zip code in which the average mean sea level pressure is the lowest?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1."
    },
    {
        "instruction": "question: What is the zip code that has the lowest average mean sea level pressure?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1."
    },
    {
        "instruction": "question: What is the average bike availability in stations that are not located in Palo Alto?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Palo Alto), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")."
    },
    {
        "instruction": "question: What is the average bike availablility for stations not in Palo Alto?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Palo Alto), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")."
    },
    {
        "instruction": "question: What is the average longitude of stations that never had bike availability more than 10?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)."
    },
    {
        "instruction": "question: What is the mean longitude for all stations that have never had more than 10 bikes available?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)."
    },
    {
        "instruction": "question: When and in what zip code did max temperature reach 80?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80."
    },
    {
        "instruction": "question: What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80."
    },
    {
        "instruction": "question: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60."
    },
    {
        "instruction": "question: For each zip code, find the ids of all trips that have a higher average mean temperature above 60?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60."
    },
    {
        "instruction": "question: For each zip code, return how many times max wind speed reached 25?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code."
    },
    {
        "instruction": "question: For each zip code, how many times has the maximum wind speed reached 25 mph?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code."
    },
    {
        "instruction": "question: On which day and in which zip code was the min dew point lower than any day in zip code 94107?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)."
    },
    {
        "instruction": "question: Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)."
    },
    {
        "instruction": "question: For each trip, return its ending station's installation date., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id."
    },
    {
        "instruction": "question: What is the installation date for each ending station on all the trips?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id."
    },
    {
        "instruction": "question: Which trip started from the station with the largest dock count? Give me the trip id., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the id of the trip that started from the station with the highest dock count?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1."
    },
    {
        "instruction": "question: Count the number of trips that did not end in San Francisco city., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Francisco), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"."
    },
    {
        "instruction": "question: How many trips did not end in San Francisco?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Francisco), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"."
    },
    {
        "instruction": "question: In zip code 94107, on which day neither Fog nor Rain was not observed?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events (Fog, Rain), c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"."
    },
    {
        "instruction": "question: On which day has it neither been foggy nor rained in the zip code of 94107?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"."
    },
    {
        "instruction": "question: What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7."
    },
    {
        "instruction": "question: What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7."
    },
    {
        "instruction": "question: What are names of stations that have average bike availability above 10 and are not located in San Jose city?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Jose), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"."
    },
    {
        "instruction": "question: What are the names of all stations that have more than 10 bikes available and are not located in San Jose?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (San Jose), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"."
    },
    {
        "instruction": "question: What are the name, latitude, and city of the station with the lowest latitude?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1."
    },
    {
        "instruction": "question: What is the name, latitude, and city of the station that is located the furthest South?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1."
    },
    {
        "instruction": "question: What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3."
    },
    {
        "instruction": "question: What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3."
    },
    {
        "instruction": "question: List the name and the number of stations for all the cities that have at least 15 stations., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15."
    },
    {
        "instruction": "question: What is the name of every city that has at least 15 stations and how many stations does it have?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15."
    },
    {
        "instruction": "question: Find the ids and names of stations from which at least 200 trips started., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200."
    },
    {
        "instruction": "question: What are the ids and names of all start stations that were the beginning of at least 200 trips?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200."
    },
    {
        "instruction": "question: Find the zip code in which the average mean visibility is lower than 10., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10."
    },
    {
        "instruction": "question: For each zip code, select all those that have an average mean visiblity below 10., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10."
    },
    {
        "instruction": "question: List all the cities in a decreasing order of each city's stations' highest latitude., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC."
    },
    {
        "instruction": "question: For each city, list their names in decreasing order by their highest station latitude., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC."
    },
    {
        "instruction": "question: What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5."
    },
    {
        "instruction": "question: What are the dates that have the 5 highest cloud cover rates and what are the rates?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5."
    },
    {
        "instruction": "question: What are the ids and durations of the trips with the top 3 durations?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3."
    },
    {
        "instruction": "question: What are the ids of the trips that lasted the longest and how long did they last?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3."
    },
    {
        "instruction": "question: For each station, return its longitude and the average duration of trips that started from the station., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id."
    },
    {
        "instruction": "question: For each start station id, what is its name, longitude and average duration of trips started there?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id."
    },
    {
        "instruction": "question: For each station, find its latitude and the minimum duration of trips that ended at the station., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id."
    },
    {
        "instruction": "question: For each end station id, what is its name, latitude, and minimum duration for trips ended there?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id."
    },
    {
        "instruction": "question: List all the distinct stations from which a trip of duration below 100 started., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100."
    },
    {
        "instruction": "question: What are all the different start station names for a trip that lasted less than 100?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100."
    },
    {
        "instruction": "question: Find all the zip codes in which the max dew point have never reached 70., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70."
    },
    {
        "instruction": "question: What are all the different zip codes that have a maximum dew point that was always below 70?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70."
    },
    {
        "instruction": "question: Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)."
    },
    {
        "instruction": "question: What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)."
    },
    {
        "instruction": "question: What are the dates in which the mean sea level pressure was between 30.3 and 31?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31."
    },
    {
        "instruction": "question: What are the dates that have an average sea level pressure between 30.3 and 31?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31."
    },
    {
        "instruction": "question: Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1."
    },
    {
        "instruction": "question: What are the days that had the smallest temperature range, and what was that range?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1."
    },
    {
        "instruction": "question: What are the id and name of the stations that have ever had more than 12 bikes available?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12."
    },
    {
        "instruction": "question: What are the different ids and names of the stations that have had more than 12 bikes available?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12."
    },
    {
        "instruction": "question: Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place., database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100."
    },
    {
        "instruction": "question: What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100."
    },
    {
        "instruction": "question: What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Palo Alto), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100."
    },
    {
        "instruction": "question: What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Palo Alto), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100."
    },
    {
        "instruction": "question: How many trips started from Mountain View city and ended at Palo Alto city?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Mountain View, Palo Alto), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"."
    },
    {
        "instruction": "question: How many trips stated from  a station in Mountain View and ended at one in Palo Alto?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city (Mountain View, Palo Alto), c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"."
    },
    {
        "instruction": "question: What is the average latitude and longitude of the starting points of all trips?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id."
    },
    {
        "instruction": "question: What is the average latitude and longitude of all starting stations for the trips?, database: Database: bike_1. t0: station(c0: id, c1: name, c2: lat, c3: long, c4: dock_count, c5: city, c6: installation_date). t1: status(c0: station_id, c1: bikes_available, c2: docks_available, c3: time) (c0) refers to t0(c0). t2: trip(c0: id, c1: duration, c2: start_date, c3: start_station_name, c4: start_station_id, c5: end_date, c6: end_station_name, c7: end_station_id, c8: bike_id, c9: subscription_type, c10: zip_code). t3: weather(c0: date, c1: max_temperature_f, c2: mean_temperature_f, c3: min_temperature_f, c4: max_dew_point_f, c5: mean_dew_point_f, c6: min_dew_point_f, c7: max_humidity, c8: mean_humidity, c9: min_humidity, c10: max_sea_level_pressure_inches, c11: mean_sea_level_pressure_inches, c12: min_sea_level_pressure_inches, c13: max_visibility_miles, c14: mean_visibility_miles, c15: min_visibility_miles, c16: max_wind_speed_mph, c17: mean_wind_speed_mph, c18: max_gust_speed_mph, c19: precipitation_inches, c20: cloud_cover, c21: events, c22: wind_dir_degrees, c23: zip_code).",
        "input": "",
        "output": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id."
    },
    {
        "instruction": "question: How many books are there?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT count(*) FROM book."
    },
    {
        "instruction": "question: List the writers of the books in ascending alphabetical order., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Writer FROM book ORDER BY Writer ASC."
    },
    {
        "instruction": "question: List the titles of the books in ascending order of issues., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Title FROM book ORDER BY Issues ASC."
    },
    {
        "instruction": "question: What are the titles of the books whose writer is not \"Elaine Lee\"?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer (Elaine Lee)).",
        "input": "",
        "output": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"."
    },
    {
        "instruction": "question: What are the title and issues of the books?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Title ,  Issues FROM book."
    },
    {
        "instruction": "question: What are the dates of publications in descending order of price?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publication_Date FROM publication ORDER BY Price DESC."
    },
    {
        "instruction": "question: What are the distinct publishers of publications with price higher than 5000000?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000."
    },
    {
        "instruction": "question: List the publisher of the publication with the highest price., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1."
    },
    {
        "instruction": "question: List the publication dates of publications with 3 lowest prices., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3."
    },
    {
        "instruction": "question: Show the title and publication dates of books., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID."
    },
    {
        "instruction": "question: Show writers who have published a book with price more than 4000000., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000."
    },
    {
        "instruction": "question: Show the titles of books in descending order of publication price., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC."
    },
    {
        "instruction": "question: Show publishers that have more than one publication., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1."
    },
    {
        "instruction": "question: Show different publishers together with the number of publications they have., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher."
    },
    {
        "instruction": "question: Please show the most common publication date., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the writers who have written more than one book., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1."
    },
    {
        "instruction": "question: List the titles of books that are not published., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)."
    },
    {
        "instruction": "question: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000., database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000."
    },
    {
        "instruction": "question: What is the number of distinct publication dates?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT COUNT (DISTINCT Publication_Date) FROM publication."
    },
    {
        "instruction": "question: How many distinct publication dates are there in our record?, database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher, c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT COUNT (DISTINCT Publication_Date) FROM publication."
    },
    {
        "instruction": "question: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\", database: Database: book_2. t0: publication(c0: publication_id, c1: book_id, c2: publisher (Wiley), c3: publication_date, c4: price) (c1) refers to t1(c0). t1: book(c0: book_id, c1: title, c2: issues, c3: writer).",
        "input": "",
        "output": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"."
    },
    {
        "instruction": "question: How many actors are there?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM actor."
    },
    {
        "instruction": "question: Count the number of actors., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM actor."
    },
    {
        "instruction": "question: List the name of actors in ascending alphabetical order., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM actor ORDER BY Name ASC."
    },
    {
        "instruction": "question: What are the names of actors, ordered alphabetically?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM actor ORDER BY Name ASC."
    },
    {
        "instruction": "question: What are the characters and duration of actors?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Character ,  Duration FROM actor."
    },
    {
        "instruction": "question: Return the characters and durations for each actor., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Character ,  Duration FROM actor."
    },
    {
        "instruction": "question: List the name of actors whose age is not 20., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM actor WHERE Age != 20."
    },
    {
        "instruction": "question: What are the names of actors who are not 20 years old?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM actor WHERE Age != 20."
    },
    {
        "instruction": "question: What are the characters of actors in descending order of age?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Character FROM actor ORDER BY age DESC."
    },
    {
        "instruction": "question: Return the characters for actors, ordered by age descending., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Character FROM actor ORDER BY age DESC."
    },
    {
        "instruction": "question: What is the duration of the oldest actor?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the duration of the actor with the greatest age., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the names of musicals with nominee \"Bob Fosse\"?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee (Bob Fosse), c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"."
    },
    {
        "instruction": "question: Return the names of musicals who have the nominee Bob Fosse., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee (Bob Fosse), c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"."
    },
    {
        "instruction": "question: What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award (Tony Award), c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"."
    },
    {
        "instruction": "question: Return the different nominees of musicals that have an award that is not the Tony Award., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award (Tony Award), c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"."
    },
    {
        "instruction": "question: Show names of actors and names of musicals they are in., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID."
    },
    {
        "instruction": "question: What are the names of actors and the musicals that they are in?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID."
    },
    {
        "instruction": "question: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\"., database: Database: musical. t0: musical(c0: musical_id, c1: name (The Phantom of the Opera), c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"."
    },
    {
        "instruction": "question: What are the names of actors who have been in the musical titled The Phantom of the Opera?, database: Database: musical. t0: musical(c0: musical_id, c1: name (The Phantom of the Opera), c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"."
    },
    {
        "instruction": "question: Show names of actors in descending order of the year their musical is awarded., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC."
    },
    {
        "instruction": "question: What are the names of actors ordered descending by the year in which their musical was awarded?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC."
    },
    {
        "instruction": "question: Show names of musicals and the number of actors who have appeared in the musicals., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID."
    },
    {
        "instruction": "question: How many actors have appeared in each musical?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID."
    },
    {
        "instruction": "question: Show names of musicals which have at least three actors., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3."
    },
    {
        "instruction": "question: What are the names of musicals who have at 3 or more actors?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3."
    },
    {
        "instruction": "question: Show different nominees and the number of musicals they have been nominated., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee."
    },
    {
        "instruction": "question: How many musicals has each nominee been nominated for?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee."
    },
    {
        "instruction": "question: Please show the nominee who has been nominated the greatest number of times., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Who is the nominee who has been nominated for the most musicals?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the most common result of the musicals., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the most frequent result across all musicals., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the nominees that have been nominated more than two musicals., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2."
    },
    {
        "instruction": "question: Who are the nominees who have been nominated more than two times?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2."
    },
    {
        "instruction": "question: List the name of musicals that do not have actors., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)."
    },
    {
        "instruction": "question: What are the names of musicals who have no actors?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee, c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)."
    },
    {
        "instruction": "question: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award (Drama Desk Award, Tony Award), c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"."
    },
    {
        "instruction": "question: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award (Drama Desk Award, Tony Award), c4: category, c5: nominee, c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"."
    },
    {
        "instruction": "question: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\"., database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee (Cleavant Derricks, Bob Fosse), c6: result). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"."
    },
    {
        "instruction": "question: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?, database: Database: musical. t0: musical(c0: musical_id, c1: name, c2: year, c3: award, c4: category, c5: nominee (Cleavant Derricks, Bob Fosse), c6: result (Nominated)). t1: actor(c0: actor_id, c1: name, c2: musical_id, c3: character, c4: duration, c5: age) (c2) refers to t1(c0).",
        "input": "",
        "output": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"."
    },
    {
        "instruction": "question: Find the emails of the user named \"Mary\"., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name (Mary), c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT email FROM user_profiles WHERE name  =  'Mary'."
    },
    {
        "instruction": "question: What is the partition id of the user named \"Iron Man\"., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name (Iron Man), c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'."
    },
    {
        "instruction": "question: How many users are there?, database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT count(*) FROM user_profiles."
    },
    {
        "instruction": "question: How many followers does each user have?, database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT count(*) FROM follows."
    },
    {
        "instruction": "question: Find the number of followers for each user., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT count(*) FROM follows GROUP BY f1."
    },
    {
        "instruction": "question: Find the number of tweets in record., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT count(*) FROM tweets."
    },
    {
        "instruction": "question: Find the number of users who posted some tweets., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT count(DISTINCT UID) FROM tweets."
    },
    {
        "instruction": "question: Find the name and email of the user whose name contains the word \u2018Swift\u2019., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'."
    },
    {
        "instruction": "question: Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'."
    },
    {
        "instruction": "question: Return the text of tweets about the topic 'intern'., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT text FROM tweets WHERE text LIKE '%intern%'."
    },
    {
        "instruction": "question: Find the name and email of the users who have more than 1000 followers., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000."
    },
    {
        "instruction": "question: Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\"., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name (Tyler Swift), c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')."
    },
    {
        "instruction": "question: Find the name and email for the users who have more than one follower., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1."
    },
    {
        "instruction": "question: Find the names of users who have more than one tweet., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1."
    },
    {
        "instruction": "question: Find the id of users who are followed by Mary and Susan., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name (Mary, Susan), c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"."
    },
    {
        "instruction": "question: Find the id of users who are followed by Mary or Susan., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name (Mary, Susan), c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"."
    },
    {
        "instruction": "question: Find the name of the user who has the largest number of followers., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the name and email of the user followed by the least number of people., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1."
    },
    {
        "instruction": "question: List the name and number of followers for each user, and sort the results by the number of followers in descending order., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC."
    },
    {
        "instruction": "question: List the names of 5 users followed by the largest number of other users., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5."
    },
    {
        "instruction": "question: List the text of all tweets in the order of date., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT text FROM tweets ORDER BY createdate."
    },
    {
        "instruction": "question: Find the name of each user and number of tweets tweeted by each of them., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid."
    },
    {
        "instruction": "question: Find the name and partition id for users who tweeted less than twice., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2."
    },
    {
        "instruction": "question: Find the name of the user who tweeted more than once, and number of tweets tweeted by them., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1."
    },
    {
        "instruction": "question: Find the average number of followers for the users who do not have any tweet., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)."
    },
    {
        "instruction": "question: Find the average number of followers for the users who had some tweets., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)."
    },
    {
        "instruction": "question: Find the maximum and total number of followers of all users., database: Database: twitter_1. t0: follows(c0: f1, c1: f2) (c1) refers to t2(c0), (c0) refers to t2(c0). t1: tweets(c0: id, c1: uid, c2: text, c3: createdate) (c1) refers to t2(c0). t2: user_profiles(c0: uid, c1: name, c2: email, c3: partitionid, c4: followers).",
        "input": "",
        "output": "SELECT max(followers) ,  sum(followers) FROM user_profiles."
    },
    {
        "instruction": "question: Find the names of all the catalog entries., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT distinct(catalog_entry_name) FROM catalog_contents."
    },
    {
        "instruction": "question: What are all the catalog entry names?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT distinct(catalog_entry_name) FROM catalog_contents."
    },
    {
        "instruction": "question: Find the list of attribute data types possessed by more than 3 attribute definitions., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3."
    },
    {
        "instruction": "question: What are the attribute data types with more than 3 attribute definitions?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3."
    },
    {
        "instruction": "question: What is the attribute data type of the attribute with name \"Green\"?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name (Green), c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"."
    },
    {
        "instruction": "question: Find the attribute data type for the attribute named \"Green\"., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name (Green), c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"."
    },
    {
        "instruction": "question: Find the name and level of catalog structure with level between 5 and 10., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10."
    },
    {
        "instruction": "question: What are the name and level of catalog structure with level number between 5 and 10, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10."
    },
    {
        "instruction": "question: Find all the catalog publishers whose name contains \"Murray\", database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"."
    },
    {
        "instruction": "question: Which catalog publishers have substring \"Murray\" in their names?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"."
    },
    {
        "instruction": "question: Which catalog publisher has published the most catalogs?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the catalog publisher that has the most catalogs., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the names and publication dates of all catalogs that have catalog level number greater than 5., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5."
    },
    {
        "instruction": "question: What are the name and publication date of the catalogs with catalog level number above 5?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5."
    },
    {
        "instruction": "question: What are the entry names of catalog with the attribute possessed by most entries., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)."
    },
    {
        "instruction": "question: Find the entry names of the catalog with the attribute that have the most entries., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)."
    },
    {
        "instruction": "question: What is the entry name of the most expensive catalog (in USD)?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the entry name of the catalog with the highest price (in USD)., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the level name of the cheapest catalog (in USD)?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1."
    },
    {
        "instruction": "question: Find the level name of the catalog with the lowest price (in USD)., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1."
    },
    {
        "instruction": "question: What are the average and minimum price (in Euro) of all products?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents."
    },
    {
        "instruction": "question: Give me the average and minimum price (in Euro) of the products., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents."
    },
    {
        "instruction": "question: What is the product with the highest height? Give me the catalog entry name., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name (Product)). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1."
    },
    {
        "instruction": "question: Which catalog content has the highest height? Give me the catalog entry name., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the name of the product that has the smallest capacity., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name (Product)). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1."
    },
    {
        "instruction": "question: Which catalog content has the smallest capacity? Return the catalog entry name., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1."
    },
    {
        "instruction": "question: Find the names of all the products whose stock number starts with \"2\"., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"."
    },
    {
        "instruction": "question: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name (Product)). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"."
    },
    {
        "instruction": "question: Find the names of catalog entries with level number 8., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"."
    },
    {
        "instruction": "question: What are the names of catalog entries with level number 8?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"."
    },
    {
        "instruction": "question: Find the names of the products with length smaller than 3 or height greater than 5., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5."
    },
    {
        "instruction": "question: Which catalog contents have length below 3 or above 5? Find the catalog entry names., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5."
    },
    {
        "instruction": "question: Find the name and attribute ID of the attribute definitions with attribute value 0., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0."
    },
    {
        "instruction": "question: Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0."
    },
    {
        "instruction": "question: Find the name and capacity of products with price greater than 700 (in USD)., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700."
    },
    {
        "instruction": "question: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700."
    },
    {
        "instruction": "question: Find the dates on which more than one revisions were made., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1."
    },
    {
        "instruction": "question: On which days more than one revisions were made on catalogs., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1."
    },
    {
        "instruction": "question: How many products are there in the records?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT count(*) FROM catalog_contents."
    },
    {
        "instruction": "question: Find the total number of catalog contents., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT count(*) FROM catalog_contents."
    },
    {
        "instruction": "question: Name all the products with next entry ID greater than 8., database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8."
    },
    {
        "instruction": "question: What are the catalog entry names of the products with next entry ID above 8?, database: Database: product_catalog. t0: attribute_definitions(c0: attribute_id, c1: attribute_name, c2: attribute_data_type). t1: catalogs(c0: catalog_id, c1: catalog_name, c2: catalog_publisher, c3: date_of_publication, c4: date_of_latest_revision). t2: catalog_structure(c0: catalog_level_number, c1: catalog_id, c2: catalog_level_name). t3: catalog_contents(c0: catalog_entry_id, c1: catalog_level_number, c2: parent_entry_id, c3: previous_entry_id, c4: next_entry_id, c5: catalog_entry_name, c6: product_stock_number, c7: price_in_dollars, c8: price_in_euros, c9: price_in_pounds, c10: capacity, c11: length, c12: height, c13: width). t4: catalog_contents_additional_attributes(c0: catalog_entry_id, c1: catalog_level_number, c2: attribute_id, c3: attribute_value).",
        "input": "",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8."
    },
    {
        "instruction": "question: How many aircrafts do we have?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Aircraft."
    },
    {
        "instruction": "question: How many aircrafts exist in the database?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Aircraft."
    },
    {
        "instruction": "question: Show name and distance for all aircrafts., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  distance FROM Aircraft."
    },
    {
        "instruction": "question: What are the names and distances for all airplanes?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  distance FROM Aircraft."
    },
    {
        "instruction": "question: Show ids for all aircrafts with more than 1000 distance., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT aid FROM Aircraft WHERE distance  >  1000."
    },
    {
        "instruction": "question: What are the ids of all aircrafts that can cover a distance of more than 1000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT aid FROM Aircraft WHERE distance  >  1000."
    },
    {
        "instruction": "question: How many aircrafts have distance between 1000 and 5000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000."
    },
    {
        "instruction": "question: What is the count of aircrafts that have a distance between 1000 and 5000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000."
    },
    {
        "instruction": "question: What is the name and distance for aircraft with id 12?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12."
    },
    {
        "instruction": "question: What is the name and distance for the aircraft that has an id of 12?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12."
    },
    {
        "instruction": "question: What is the minimum, average, and maximum distance of all aircrafts., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft."
    },
    {
        "instruction": "question: Return the minimum, average and maximum distances traveled across all aircrafts., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft."
    },
    {
        "instruction": "question: Show the id and name of the aircraft with the maximum distance., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the id and name of the aircraft that can cover the maximum distance?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the name of aircrafts with top three lowest distances., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3."
    },
    {
        "instruction": "question: What are the aircrafts with top 3 shortest lengthes? List their names., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3."
    },
    {
        "instruction": "question: Show names for all aircrafts with distances more than the average., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)."
    },
    {
        "instruction": "question: What are the names of all aircrafts that can cover more distances than average?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)."
    },
    {
        "instruction": "question: How many employees do we have?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Employee."
    },
    {
        "instruction": "question: What is the number of employees?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Employee."
    },
    {
        "instruction": "question: Show name and salary for all employees sorted by salary., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  salary FROM Employee ORDER BY salary."
    },
    {
        "instruction": "question: What is the name and salary of all employees in order of salary?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  salary FROM Employee ORDER BY salary."
    },
    {
        "instruction": "question: Show ids for all employees with at least 100000 salary., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid FROM Employee WHERE salary  >  100000."
    },
    {
        "instruction": "question: What is the id of every employee who has at least a salary of  100000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid FROM Employee WHERE salary  >  100000."
    },
    {
        "instruction": "question: How many employees have salary between 100000 and 200000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000."
    },
    {
        "instruction": "question: What is the number of employees that have a salary between 100000 and 200000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000."
    },
    {
        "instruction": "question: What is the name and salary for employee with id 242518965?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965."
    },
    {
        "instruction": "question: What is the name and salary of the employee with the id 242518965?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965."
    },
    {
        "instruction": "question: What is average and maximum salary of all employees., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(salary) ,  max(salary) FROM Employee."
    },
    {
        "instruction": "question: What is the average and largest salary of all employees?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(salary) ,  max(salary) FROM Employee."
    },
    {
        "instruction": "question: Show the id and name of the employee with maximum salary., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the id and name of the employee with the highest salary?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the name of employees with three lowest salaries., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3."
    },
    {
        "instruction": "question: What is the name of the 3 employees who get paid the least?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3."
    },
    {
        "instruction": "question: Show names for all employees with salary more than the average., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)."
    },
    {
        "instruction": "question: What are the names of all employees who have a salary higher than average?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)."
    },
    {
        "instruction": "question: Show the id and salary of Mark Young., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name (Mark Young), c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'."
    },
    {
        "instruction": "question: What is the id and salary of the employee named Mark Young?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name (Mark Young), c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'."
    },
    {
        "instruction": "question: How many flights do we have?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Flight."
    },
    {
        "instruction": "question: What is the number of flights?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(*) FROM Flight."
    },
    {
        "instruction": "question: Show flight number, origin, destination of all flights in the alphabetical order of the departure cities., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin."
    },
    {
        "instruction": "question: What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin."
    },
    {
        "instruction": "question: Show all flight number from Los Angeles., database: Database: flight_1. t0: flight(c0: flno, c1: origin (Los Angeles), c2: destination (Los Angeles), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"."
    },
    {
        "instruction": "question: What are the numbers of all flights coming from Los Angeles?, database: Database: flight_1. t0: flight(c0: flno, c1: origin (Los Angeles), c2: destination (Los Angeles), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"."
    },
    {
        "instruction": "question: Show origins of all flights with destination Honolulu., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination (Honolulu), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"."
    },
    {
        "instruction": "question: What are the origins of all flights that are headed to Honolulu?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination (Honolulu), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"."
    },
    {
        "instruction": "question: Show me the departure date and arrival date for all flights from Los Angeles to Honolulu., database: Database: flight_1. t0: flight(c0: flno, c1: origin (Los Angeles), c2: destination (Los Angeles, Honolulu), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"."
    },
    {
        "instruction": "question: What are the departure and arrival dates of all flights from LA to Honolulu?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination (Honolulu), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"."
    },
    {
        "instruction": "question: Show flight number for all flights with more than 2000 distance., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno FROM Flight WHERE distance  >  2000."
    },
    {
        "instruction": "question: What are the numbers of all flights that can cover a distance of more than 2000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno FROM Flight WHERE distance  >  2000."
    },
    {
        "instruction": "question: What is the average price for flights from Los Angeles to Honolulu., database: Database: flight_1. t0: flight(c0: flno, c1: origin (Los Angeles), c2: destination (Los Angeles, Honolulu), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"."
    },
    {
        "instruction": "question: What is the average price for flights from LA to Honolulu?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination (Honolulu), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"."
    },
    {
        "instruction": "question: Show origin and destination for flights with price higher than 300., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin ,  destination FROM Flight WHERE price  >  300."
    },
    {
        "instruction": "question: What is the origin and destination for all flights whose price is higher than 300?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin ,  destination FROM Flight WHERE price  >  300."
    },
    {
        "instruction": "question: Show the flight number and distance of the flight with maximum price., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the flight number and its distance for the one with the maximum price?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the flight number of flights with three lowest distances., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3."
    },
    {
        "instruction": "question: What are the numbers of the shortest flights?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3."
    },
    {
        "instruction": "question: What is the average distance and average price for flights from Los Angeles., database: Database: flight_1. t0: flight(c0: flno, c1: origin (Los Angeles), c2: destination (Los Angeles), c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"."
    },
    {
        "instruction": "question: What is the average distance and price for all flights from LA?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"."
    },
    {
        "instruction": "question: Show all origins and the number of flights from each origin., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin ,  count(*) FROM Flight GROUP BY origin."
    },
    {
        "instruction": "question: For each origin, how many flights came from there?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin ,  count(*) FROM Flight GROUP BY origin."
    },
    {
        "instruction": "question: Show all destinations and the number of flights to each destination., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT destination ,  count(*) FROM Flight GROUP BY destination."
    },
    {
        "instruction": "question: What are the destinations and number of flights to each one?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT destination ,  count(*) FROM Flight GROUP BY destination."
    },
    {
        "instruction": "question: Which origin has most number of flights?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What place has the most flights coming from there?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which destination has least number of flights?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1."
    },
    {
        "instruction": "question: What destination has the fewest number of flights?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1."
    },
    {
        "instruction": "question: What is the aircraft name for the flight with number 99, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99."
    },
    {
        "instruction": "question: What is the name of the aircraft that was on flight number 99?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99."
    },
    {
        "instruction": "question: Show all flight numbers with aircraft Airbus A340-300., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Airbus A340-300), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"."
    },
    {
        "instruction": "question: What are the flight numbers for the aircraft Airbus A340-300?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Airbus A340-300), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"."
    },
    {
        "instruction": "question: Show aircraft names and number of flights for each aircraft., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid."
    },
    {
        "instruction": "question: What is the name of each aircraft and how many flights does each one complete?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid."
    },
    {
        "instruction": "question: Show names for all aircraft with at least two flights., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2."
    },
    {
        "instruction": "question: What are the names for all aircrafts with at least 2 flights?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2."
    },
    {
        "instruction": "question: How many employees have certificate., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT eid) FROM Certificate."
    },
    {
        "instruction": "question: What is the count of distinct employees with certificates?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT eid) FROM Certificate."
    },
    {
        "instruction": "question: Show ids for all employees who don't have a certificate., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate."
    },
    {
        "instruction": "question: What are the ids of all employees that don't have certificates?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate."
    },
    {
        "instruction": "question: Show names for all aircrafts of which John Williams has certificates., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name (John Williams), c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"."
    },
    {
        "instruction": "question: What are the names of all aircrafts that John Williams have certificates to be able to fly?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name (John Williams), c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"."
    },
    {
        "instruction": "question: Show names for all employees who have certificate of Boeing 737-800., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Boeing 737-800), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"."
    },
    {
        "instruction": "question: What are the names of all employees who have a certificate to fly Boeing 737-800?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Boeing 737-800), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"."
    },
    {
        "instruction": "question: Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Airbus A340-300, Boeing 737-800), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"."
    },
    {
        "instruction": "question: What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Airbus A340-300, Boeing 737-800), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"."
    },
    {
        "instruction": "question: Show names for all employees who do not have certificate of Boeing 737-800., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name (Boeing 737-800), c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"."
    },
    {
        "instruction": "question: What are the names of all employees who are not certified to fly Boeing 737-800s?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"."
    },
    {
        "instruction": "question: Show the name of aircraft which fewest people have its certificate., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the names of the aircraft that the least people are certified to fly?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate., database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5."
    },
    {
        "instruction": "question: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5."
    },
    {
        "instruction": "question: what is the salary and name of the employee who has the most number of aircraft certificates?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the salaray and name of the employee that is certified to fly the most planes?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the salaray and name of the employee with the most certificates to fly planes more than 5000?, database: Database: flight_1. t0: flight(c0: flno, c1: origin, c2: destination, c3: distance, c4: departure_date, c5: arrival_date, c6: price, c7: aid) (c7) refers to t1(c0). t1: aircraft(c0: aid, c1: name, c2: distance). t2: employee(c0: eid, c1: name, c2: salary). t3: certificate(c0: eid, c1: aid) (c1) refers to t1(c0), (c0) refers to t2(c0).",
        "input": "",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many allergies are there?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(DISTINCT allergy) FROM Allergy_type."
    },
    {
        "instruction": "question: How many allergy entries are there?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(DISTINCT allergy) FROM Allergy_type."
    },
    {
        "instruction": "question: How many different allergy types exist?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(DISTINCT allergytype) FROM Allergy_type."
    },
    {
        "instruction": "question: How many distinct allergies are there?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(DISTINCT allergytype) FROM Allergy_type."
    },
    {
        "instruction": "question: Show all allergy types., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT allergytype FROM Allergy_type."
    },
    {
        "instruction": "question: What are the different allergy types?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT allergytype FROM Allergy_type."
    },
    {
        "instruction": "question: Show all allergies and their types., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergy ,  allergytype FROM Allergy_type."
    },
    {
        "instruction": "question: What are the allergies and their types?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergy ,  allergytype FROM Allergy_type."
    },
    {
        "instruction": "question: Show all allergies with type food., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"."
    },
    {
        "instruction": "question: What are all the different food allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"."
    },
    {
        "instruction": "question: What is the type of allergy Cat?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"."
    },
    {
        "instruction": "question: What is allergy type of a cat allergy?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"."
    },
    {
        "instruction": "question: How many allergies have type animal?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (animal)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"."
    },
    {
        "instruction": "question: How many animal type allergies exist?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (animal)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"."
    },
    {
        "instruction": "question: Show all allergy types and the number of allergies in each type., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype."
    },
    {
        "instruction": "question: What are the allergy types and how many allergies correspond to each one?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype."
    },
    {
        "instruction": "question: Which allergy type has most number of allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which allergy type is most common?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which allergy type has least number of allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: Which allergy type is the least common?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: How many students are there?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student."
    },
    {
        "instruction": "question: What is the total number of students?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student."
    },
    {
        "instruction": "question: Show first name and last name for all students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Fname ,  Lname FROM Student."
    },
    {
        "instruction": "question: What are the full names of all students, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Fname ,  Lname FROM Student."
    },
    {
        "instruction": "question: How many different advisors are listed?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(DISTINCT advisor) FROM Student."
    },
    {
        "instruction": "question: How many advisors are there?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(DISTINCT advisor) FROM Student."
    },
    {
        "instruction": "question: Show all majors., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT Major FROM Student."
    },
    {
        "instruction": "question: What are the different majors?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT Major FROM Student."
    },
    {
        "instruction": "question: Show all cities where students live., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT city_code FROM Student."
    },
    {
        "instruction": "question: What cities do students live in?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT city_code FROM Student."
    },
    {
        "instruction": "question: Show first name, last name, age for all female students. Their sex is F., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'."
    },
    {
        "instruction": "question: What are the full names and ages for all female students whose sex is F?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'."
    },
    {
        "instruction": "question: Show student ids for all male students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student WHERE Sex  =  'M'."
    },
    {
        "instruction": "question: What are the student ids for all male students?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student WHERE Sex  =  'M'."
    },
    {
        "instruction": "question: How many students are age 18?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE age  =  18."
    },
    {
        "instruction": "question: How many students are 18 years old?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE age  =  18."
    },
    {
        "instruction": "question: Show all student ids who are older than 20., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student WHERE age  >  20."
    },
    {
        "instruction": "question: What are the student ids for students over 20 years old?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student WHERE age  >  20."
    },
    {
        "instruction": "question: Which city does the student whose last name is \"Kim\" live in?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname (Kim), c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"."
    },
    {
        "instruction": "question: Give the city that the student whose family name is Kim lives in., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname (Kim), c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"."
    },
    {
        "instruction": "question: Who is the advisor of student with ID 1004?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Advisor FROM Student WHERE StuID  =  1004."
    },
    {
        "instruction": "question: Who advises student 1004?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Advisor FROM Student WHERE StuID  =  1004."
    },
    {
        "instruction": "question: How many students live in HKG or CHI?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code (CHI, HKG)).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"."
    },
    {
        "instruction": "question: Give the number of students living in either HKG or CHI., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code (CHI, HKG)).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"."
    },
    {
        "instruction": "question: Show the minimum, average, and maximum age of all students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student."
    },
    {
        "instruction": "question: What is the minimum, mean, and maximum age across all students?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student."
    },
    {
        "instruction": "question: What is the last name of the youngest student?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)."
    },
    {
        "instruction": "question: Provide the last name of the youngest student., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)."
    },
    {
        "instruction": "question: Show the student id of the oldest student., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)."
    },
    {
        "instruction": "question: What student id corresponds to the oldest student?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)."
    },
    {
        "instruction": "question: Show all majors and corresponding number of students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT major ,  count(*) FROM Student GROUP BY major."
    },
    {
        "instruction": "question: How many students are there for each major?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT major ,  count(*) FROM Student GROUP BY major."
    },
    {
        "instruction": "question: Which major has most number of students?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the largest major?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show all ages and corresponding number of students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT age ,  count(*) FROM Student GROUP BY age."
    },
    {
        "instruction": "question: How old is each student and how many students are each age?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT age ,  count(*) FROM Student GROUP BY age."
    },
    {
        "instruction": "question: Show the average age for male and female students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT avg(age) ,  sex FROM Student GROUP BY sex."
    },
    {
        "instruction": "question: What are the average ages for male and female students?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT avg(age) ,  sex FROM Student GROUP BY sex."
    },
    {
        "instruction": "question: Show all cities and corresponding number of students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code."
    },
    {
        "instruction": "question: How many students live in each city?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code."
    },
    {
        "instruction": "question: Show all advisors and corresponding number of students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor."
    },
    {
        "instruction": "question: How many students does each advisor have?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor."
    },
    {
        "instruction": "question: Which advisor has most number of students?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Give the advisor with the most students., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many students have cat allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"."
    },
    {
        "instruction": "question: How many students are affected by cat allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"."
    },
    {
        "instruction": "question: Show all student IDs who have at least two allergies., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What are the students ids of students who have more than one allergy?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What are the student ids of students who don't have any allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy."
    },
    {
        "instruction": "question: Which students are unaffected by allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy."
    },
    {
        "instruction": "question: How many female students have milk or egg allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Milk, Eggs), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Milk, Eggs)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"."
    },
    {
        "instruction": "question: How many students who are female are allergic to milk or eggs?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Eggs, Milk), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Eggs, Milk)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"."
    },
    {
        "instruction": "question: How many students have a food allergy?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"."
    },
    {
        "instruction": "question: How many students are affected by food related allergies?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"."
    },
    {
        "instruction": "question: Which allergy has most number of students affected?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which allergy is the most common?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show all allergies with number of students affected., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy."
    },
    {
        "instruction": "question: How many students have each different allergy?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy."
    },
    {
        "instruction": "question: Show all allergy type with number of students affected., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype."
    },
    {
        "instruction": "question: How many students are affected by each allergy type?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype."
    },
    {
        "instruction": "question: Find the last name and age of the student who has allergy to both milk and cat., database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat, Milk), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat, Milk)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")."
    },
    {
        "instruction": "question: What are the last names and ages of the students who are allergic to milk and cat?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat, Milk), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat, Milk)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")."
    },
    {
        "instruction": "question: What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname (Lisa), c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy."
    },
    {
        "instruction": "question: What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname (Lisa), c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy."
    },
    {
        "instruction": "question: Find the first name and gender of the student who has allergy to milk but not cat., database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat, Milk), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat, Milk)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")."
    },
    {
        "instruction": "question: What are the first name and gender of the students who have allergy to milk but can put up with cats?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Milk, Cat), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Milk, Cat)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")."
    },
    {
        "instruction": "question: Find the average age of the students who have allergies with food and animal types., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (animal, food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")."
    },
    {
        "instruction": "question: How old are the students with allergies to food and animal types on average?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (animal, food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")."
    },
    {
        "instruction": "question: List the first and last name of the students who do not have any food type allergy., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")."
    },
    {
        "instruction": "question: What is the full name of each student who is not allergic to any type of food., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")."
    },
    {
        "instruction": "question: Find the number of male (sex is 'M') students who have some food type allery., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")."
    },
    {
        "instruction": "question: How many male students (sex is 'M') are allergic to any type of food?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")."
    },
    {
        "instruction": "question: Find the different first names and cities of the students who have allergy to milk or cat., database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat, Milk), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat, Milk)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"."
    },
    {
        "instruction": "question: What are the distinct first names and cities of the students who have allergy either to milk or to cat?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Cat, Milk), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Cat, Milk)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"."
    },
    {
        "instruction": "question: Find the number of students who are older than 18 and do not have allergy to either food or animal., database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (animal, food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")."
    },
    {
        "instruction": "question: How many students are over 18 and do not have allergy to food type or animal type?, database: Database: allergy_1. t0: allergy_type(c0: allergy, c1: allergytype (animal, food)). t1: has_allergy(c0: stuid, c1: allergy). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")."
    },
    {
        "instruction": "question: Find the first name and major of the students who are not allegry to soy., database: Database: allergy_1. t0: allergy_type(c0: allergy (Soy), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Soy)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")."
    },
    {
        "instruction": "question: What are the first name and major of the students who are able to consume soy?, database: Database: allergy_1. t0: allergy_type(c0: allergy (Soy), c1: allergytype). t1: has_allergy(c0: stuid, c1: allergy (Soy)). t2: student(c0: stuid, c1: lname, c2: fname, c3: age, c4: sex, c5: major, c6: advisor, c7: city_code).",
        "input": "",
        "output": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")."
    },
    {
        "instruction": "question: A list of the top 5 countries by number of invoices. List country name and number of invoices., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5."
    },
    {
        "instruction": "question: What are the top 5 countries by number of invoices and how many do they have?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5."
    },
    {
        "instruction": "question: A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8."
    },
    {
        "instruction": "question: What are the names of the top 8 countries by total invoice size and what are those sizes?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8."
    },
    {
        "instruction": "question: A list of the top 10 countries by average invoice size. List country name and average invoice size., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10."
    },
    {
        "instruction": "question: What are the names of the countries and average invoice size of the top countries by size?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10."
    },
    {
        "instruction": "question: Find out 5 customers who most recently purchased something. List customers' first and last name., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5."
    },
    {
        "instruction": "question: What are the first and last names of the 5 customers who purchased something most recently?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5."
    },
    {
        "instruction": "question: Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10."
    },
    {
        "instruction": "question: What are the top 10 customers' first and last names by total number of orders and how many orders did they make?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10."
    },
    {
        "instruction": "question: List the top 10 customers by total gross sales. List customers' first and last name and total gross sales., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10."
    },
    {
        "instruction": "question: What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10."
    },
    {
        "instruction": "question: List the top 5 genres by number of tracks. List genres name and total tracks., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5."
    },
    {
        "instruction": "question: How many tracks does each genre have and what are the names of the top 5?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5."
    },
    {
        "instruction": "question: List every album's title., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title FROM albums."
    },
    {
        "instruction": "question: What are the titles of all the albums?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title FROM albums."
    },
    {
        "instruction": "question: List every album ordered by album title in ascending order., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title FROM albums ORDER BY title."
    },
    {
        "instruction": "question: What are the titles of all the albums alphabetically ascending?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title FROM albums ORDER BY title."
    },
    {
        "instruction": "question: List every album whose title starts with A in alphabetical order., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title."
    },
    {
        "instruction": "question: What are the titles of all albums that start with A in alphabetical order?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title."
    },
    {
        "instruction": "question: List the customers first and last name of 10 least expensive invoices., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10."
    },
    {
        "instruction": "question: What are the first and last names of the customers with the 10 cheapest invoices?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10."
    },
    {
        "instruction": "question: List total amount of  invoice from Chicago, IL., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city (Chicago), c6: state (IL), c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city (Chicago), c5: billing_state (IL), c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"."
    },
    {
        "instruction": "question: What are the total amount of money in the invoices billed from Chicago, Illinois?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city (Chicago), c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city (Chicago), c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Money), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"."
    },
    {
        "instruction": "question: List the number of invoices from Chicago, IL., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city (Chicago), c6: state (IL), c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city (Chicago), c5: billing_state (IL), c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"."
    },
    {
        "instruction": "question: How many invoices were billed from Chicago, IL?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city (Chicago), c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city (Chicago), c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"."
    },
    {
        "instruction": "question: List the number of invoices from the US, grouped by state., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state."
    },
    {
        "instruction": "question: How many invoices were billed from each state?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state."
    },
    {
        "instruction": "question: List the state in the US with the most invoices., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the states with the most invoices?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the number of invoices and the invoice total from California., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"."
    },
    {
        "instruction": "question: What is the number of invoices and total money billed in them from CA?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state (CA), c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state (CA), c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Money), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"."
    },
    {
        "instruction": "question: List Aerosmith's albums., database: Database: store_1. t0: artists(c0: id, c1: name (Aerosmith)). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"."
    },
    {
        "instruction": "question: What are the titles of all the Aerosmith albums?, database: Database: store_1. t0: artists(c0: id, c1: name (Aerosmith)). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"."
    },
    {
        "instruction": "question: How many albums does Billy Cobham has?, database: Database: store_1. t0: artists(c0: id, c1: name (Billy Cobham)). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer (Billy Cobham), c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"."
    },
    {
        "instruction": "question: How many albums has Billy Cobam released?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer (Billy Cobham), c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"."
    },
    {
        "instruction": "question: Eduardo Martins is a customer at which company?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Eduardo), c2: last_name (Martins), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"."
    },
    {
        "instruction": "question: What is the company where Eduardo Martins is a customer?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Eduardo), c2: last_name (Martins), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"."
    },
    {
        "instruction": "question: What is Astrid Gruber's email and phone number?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Astrid), c2: last_name (Gruber), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"."
    },
    {
        "instruction": "question: What is the email and phone number of Astrid Gruber the customer?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Astrid), c2: last_name (Gruber), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"."
    },
    {
        "instruction": "question: How many customers live in Prague city?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city (Prague), c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city (Prague), c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM customers WHERE city = \"Prague\"."
    },
    {
        "instruction": "question: How many customers live in the city of Prague?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city (Prague), c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city (Prague), c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM customers WHERE city = \"Prague\"."
    },
    {
        "instruction": "question: How many customers in state of CA?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state (CA), c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state (CA), c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM customers WHERE state = \"CA\"."
    },
    {
        "instruction": "question: How many customers are from California?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM customers WHERE state = \"CA\"."
    },
    {
        "instruction": "question: What country does Roberto Almeida live?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Roberto), c2: last_name (Almeida), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"."
    },
    {
        "instruction": "question: In which country does Roberto Almeida?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Roberto), c2: last_name (Almeida), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"."
    },
    {
        "instruction": "question: List the name of albums that are released by aritist whose name has 'Led', database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'."
    },
    {
        "instruction": "question: What is the title of the album that was released by the artist whose name has the phrase 'Led'?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'."
    },
    {
        "instruction": "question: How many customers does Steve Johnson support?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Johnson), c2: first_name (Steve), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Steve), c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"."
    },
    {
        "instruction": "question: What is the count of customers that Steve Johnson supports?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Johnson), c2: first_name (Steve), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Steve), c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"."
    },
    {
        "instruction": "question: What is the title, phone and hire date of Nancy Edwards?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"."
    },
    {
        "instruction": "question: What is the title, phone number and hire date for the employee named Nancy Edwards?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"."
    },
    {
        "instruction": "question: find the full name of employees who report to Nancy Edwards?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"."
    },
    {
        "instruction": "question: What is the first and last name of the employee who reports to Nancy Edwards?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"."
    },
    {
        "instruction": "question: What is the address of employee Nancy Edwards?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"."
    },
    {
        "instruction": "question: What is Nancy Edwards's address?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"."
    },
    {
        "instruction": "question: Find the full name of employee who supported the most number of customers., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the full name of the employee who has the most customers?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many employees are living in Canada?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country (Canada), c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country (Canada), c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country (Canada), c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM employees WHERE country = \"Canada\"."
    },
    {
        "instruction": "question: How many employees live in Canada?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country (Canada), c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country (Canada), c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country (Canada), c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM employees WHERE country = \"Canada\"."
    },
    {
        "instruction": "question: What is employee Nancy Edwards's phone number?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"."
    },
    {
        "instruction": "question: What is the the phone number of Nancy Edwards?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name (Edwards), c2: first_name (Nancy), c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"."
    },
    {
        "instruction": "question: Who is the youngest employee in the company? List employee's first and last name., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1."
    },
    {
        "instruction": "question: What si the youngest employee's first and last name?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1."
    },
    {
        "instruction": "question: List top 10 employee work longest in the company. List employee's first and last name., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10."
    },
    {
        "instruction": "question: What are the first and last names of the top 10 longest-serving employees?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10."
    },
    {
        "instruction": "question: Find the number of employees whose title is IT Staff from each city?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title (IT Staff), c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city."
    },
    {
        "instruction": "question: How many employees who are IT staff are from each city?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title (IT Staff), c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city."
    },
    {
        "instruction": "question: Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the first and last names of all the employees and how many people report to them?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many orders does Lucas Mancini has?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Lucas), c2: last_name (Mancini), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"."
    },
    {
        "instruction": "question: How many orders does Luca Mancini have in his invoices?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name (Mancini), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"."
    },
    {
        "instruction": "question: What is the total amount of money spent by Lucas Mancini?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Lucas), c2: last_name (Mancini), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Money), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"."
    },
    {
        "instruction": "question: How much money did Lucas Mancini spend?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Lucas), c2: last_name (Mancini), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Money), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"."
    },
    {
        "instruction": "question: List all media types., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT name FROM media_types."
    },
    {
        "instruction": "question: What are the names of all the media types?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT name FROM media_types."
    },
    {
        "instruction": "question: List all different genre types., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT DISTINCT name FROM genres."
    },
    {
        "instruction": "question: What are the different names of the genres?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT DISTINCT name FROM genres."
    },
    {
        "instruction": "question: List the name of all playlist., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT name FROM playlists."
    },
    {
        "instruction": "question: What are the names of all the playlists?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT name FROM playlists."
    },
    {
        "instruction": "question: Who is the composer of track Fast As a Shark?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Fast As a Shark), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"."
    },
    {
        "instruction": "question: What is the composer who created the track \"Fast As a Shark\"?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Fast As a Shark), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"."
    },
    {
        "instruction": "question: How long does track Fast As a Shark has?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Fast As a Shark), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"."
    },
    {
        "instruction": "question: How many milliseconds long is Fast As a Shark?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Fast As a Shark), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"."
    },
    {
        "instruction": "question: What is the name of tracks whose genre is Rock?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\"."
    },
    {
        "instruction": "question: What is the name of all tracks in the Rock genre?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\"."
    },
    {
        "instruction": "question: What is title of album which track Balls to the Wall belongs to?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title (Balls to the Wall), c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Balls to the Wall), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"."
    },
    {
        "instruction": "question: What is the name of the album that has the track Ball to the Wall?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"."
    },
    {
        "instruction": "question: List name of all tracks in Balls to the Wall., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title (Balls to the Wall), c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Balls to the Wall), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"."
    },
    {
        "instruction": "question: What is the name of all tracks in the album named Balls to the Wall?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title (Balls to the Wall), c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Balls to the Wall), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"."
    },
    {
        "instruction": "question: List title of albums have the number of tracks greater than 10., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10."
    },
    {
        "instruction": "question: What are the names of the albums that have more than 10 tracks?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10."
    },
    {
        "instruction": "question: List the name of tracks belongs to genre Rock and whose media type is MPEG audio file., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name (MPEG audio file)). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"."
    },
    {
        "instruction": "question: What are the names of all Rock tracks that are stored on MPEG audio files?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"."
    },
    {
        "instruction": "question: List the name of tracks belongs to genre Rock or media type is MPEG audio file., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name (MPEG audio file)). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"."
    },
    {
        "instruction": "question: What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Belong), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"."
    },
    {
        "instruction": "question: List the name of tracks belongs to genre Rock or genre Jazz., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Jazz, Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"."
    },
    {
        "instruction": "question: What are the names of the tracks that are Rock or Jazz songs?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name (Jazz, Rock)). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"."
    },
    {
        "instruction": "question: List the name of all tracks in the playlists of Movies., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name (Movies)). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"."
    },
    {
        "instruction": "question: What are the names of all tracks that are on playlists titled Movies?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name (Movies)). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"."
    },
    {
        "instruction": "question: List the name of playlist which has number of tracks greater than 100., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100."
    },
    {
        "instruction": "question: What are the names of all playlists that have more than 100 tracks?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100."
    },
    {
        "instruction": "question: List all tracks bought by customer Daan Peeters., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name (Daan), c2: last_name (Peeters), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\"."
    },
    {
        "instruction": "question: What are the tracks that Dean Peeters bought?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name (Peeters), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\"."
    },
    {
        "instruction": "question: How much is the track Fast As a Shark?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Fast As a Shark), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"."
    },
    {
        "instruction": "question: What is the unit price of the tune \"Fast As a Shark\"?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name (Fast As a Shark), c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"."
    },
    {
        "instruction": "question: Find the name of tracks which are in Movies playlist but not in music playlist., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name (Movies, Music)). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'."
    },
    {
        "instruction": "question: What are the names of all tracks that are on the Movies playlist but not in the music playlist?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name (Movies, Music)). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'."
    },
    {
        "instruction": "question: Find the name of tracks which are in both Movies and music playlists., database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name (Movies, Music)). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'."
    },
    {
        "instruction": "question: What are the names of all the tracks that are in both the Movies and music playlists?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name (Movies, Music)). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'."
    },
    {
        "instruction": "question: Find number of tracks in each genre?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name."
    },
    {
        "instruction": "question: How many tracks are in each genre?, database: Database: store_1. t0: artists(c0: id, c1: name). t1: sqlite_sequence(c0: name, c1: seq). t2: albums(c0: id, c1: title, c2: artist_id) (c2) refers to t0(c0). t3: employees(c0: id, c1: last_name, c2: first_name, c3: title, c4: reports_to, c5: birth_date, c6: hire_date, c7: address, c8: city, c9: state, c10: country, c11: postal_code, c12: phone, c13: fax, c14: email) (c4) refers to t3(c0). t4: customers(c0: id, c1: first_name, c2: last_name, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postal_code, c9: phone, c10: fax, c11: email, c12: support_rep_id) (c12) refers to t3(c0). t5: genres(c0: id, c1: name). t6: invoices(c0: id, c1: customer_id, c2: invoice_date, c3: billing_address, c4: billing_city, c5: billing_state, c6: billing_country, c7: billing_postal_code, c8: total) (c1) refers to t4(c0). t7: media_types(c0: id, c1: name). t8: tracks(c0: id, c1: name, c2: album_id, c3: media_type_id, c4: genre_id, c5: composer, c6: milliseconds, c7: bytes, c8: unit_price) (c3) refers to t7(c0), (c4) refers to t5(c0), (c2) refers to t2(c0). t9: invoice_lines(c0: id, c1: invoice_id, c2: track_id, c3: unit_price, c4: quantity) (c2) refers to t8(c0), (c1) refers to t6(c0). t10: playlists(c0: id, c1: name). t11: playlist_tracks(c0: playlist_id, c1: track_id) (c1) refers to t8(c0), (c0) refers to t10(c0).",
        "input": "",
        "output": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name."
    },
    {
        "instruction": "question: How many editors are there?, database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM editor."
    },
    {
        "instruction": "question: List the names of editors in ascending order of age., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM editor ORDER BY Age ASC."
    },
    {
        "instruction": "question: What are the names and ages of editors?, database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name ,  Age FROM editor."
    },
    {
        "instruction": "question: List the names of editors who are older than 25., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM editor WHERE Age  >  25."
    },
    {
        "instruction": "question: Show the names of editors of age either 24 or 25., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25."
    },
    {
        "instruction": "question: What is the name of the youngest editor?, database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1."
    },
    {
        "instruction": "question: What are the different ages of editors? Show each age along with the number of editors of that age., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age."
    },
    {
        "instruction": "question: Please show the most common age of editors., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the distinct themes of journals., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT DISTINCT Theme FROM journal."
    },
    {
        "instruction": "question: Show the names of editors and the theme of journals for which they serve on committees., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID."
    },
    {
        "instruction": "question: For each journal_committee, find the editor name and the journal theme., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID."
    },
    {
        "instruction": "question: Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC."
    },
    {
        "instruction": "question: Show the names of editors that are on the committee of journals with sales bigger than 3000., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000."
    },
    {
        "instruction": "question: Show the id, name of each editor and the number of journal committees they are on., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id."
    },
    {
        "instruction": "question: Show the names of editors that are on at least two journal committees., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2."
    },
    {
        "instruction": "question: List the names of editors that are not on any journal committee., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)."
    },
    {
        "instruction": "question: List the date, theme and sales of the journal which did not have any of the listed editors serving on committee., database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID."
    },
    {
        "instruction": "question: What is the average sales of the journals that have an editor whose work type is 'Photo'?, database: Database: journal_committee. t0: journal(c0: journal_id, c1: date, c2: theme, c3: sales). t1: editor(c0: editor_id, c1: name, c2: age). t2: journal_committee(c0: editor_id, c1: journal_id, c2: work_type (Photo)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'."
    },
    {
        "instruction": "question: How many accounts do we have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Accounts."
    },
    {
        "instruction": "question: Count the number of accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Accounts."
    },
    {
        "instruction": "question: Show ids, customer ids, names for all accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT account_id ,  customer_id ,  account_name FROM Accounts."
    },
    {
        "instruction": "question: What are the account ids, customer ids, and account names for all the accounts?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT account_id ,  customer_id ,  account_name FROM Accounts."
    },
    {
        "instruction": "question: Show other account details for account with name 338., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"."
    },
    {
        "instruction": "question: What are the other account details for the account with the name 338?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"."
    },
    {
        "instruction": "question: What is the first name, last name, and phone of the customer with account name 162?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"."
    },
    {
        "instruction": "question: Give the full name and phone of the customer who has the account name 162., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"."
    },
    {
        "instruction": "question: How many accounts does the customer with first name Art and last name Turcotte have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Art), c2: customer_last_name (Turcotte), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"."
    },
    {
        "instruction": "question: Return the number of accounts that the customer with the first name Art and last name Turcotte has., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Art), c2: customer_last_name (Turcotte), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"."
    },
    {
        "instruction": "question: Show all customer ids and the number of accounts for each customer., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id."
    },
    {
        "instruction": "question: How many accounts are there for each customer id?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id."
    },
    {
        "instruction": "question: Show the customer id and number of accounts with most accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the customer id of the customer with the most accounts, and how many accounts does this person have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the customer first, last name and id with least number of accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: Give the full name and customer id of the customer with the fewest accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: Show the number of all customers without an account., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)."
    },
    {
        "instruction": "question: How many customers do not have an account?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)."
    },
    {
        "instruction": "question: Show the first names and last names of customers without any account., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id."
    },
    {
        "instruction": "question: What are the full names of customers who do not have any accounts?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id."
    },
    {
        "instruction": "question: Show distinct first and last names for all customers with an account., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id."
    },
    {
        "instruction": "question: What are the full names of customers who have accounts?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id."
    },
    {
        "instruction": "question: How many customers have an account?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(DISTINCT customer_id) FROM Accounts."
    },
    {
        "instruction": "question: Count the number of customers who hold an account., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(DISTINCT customer_id) FROM Accounts."
    },
    {
        "instruction": "question: How many customers do we have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers."
    },
    {
        "instruction": "question: Count the number of customers., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers."
    },
    {
        "instruction": "question: Show ids, first names, last names, and phones for all customers., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers."
    },
    {
        "instruction": "question: What are the ids, full names, and phones of each customer?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers."
    },
    {
        "instruction": "question: What is the phone and email for customer with first name Aniyah and last name Feest?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Aniyah), c2: customer_last_name (Feest), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"."
    },
    {
        "instruction": "question: Return the phone and email of the customer with the first name Aniyah and last name Feest., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Aniyah), c2: customer_last_name (Feest), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"."
    },
    {
        "instruction": "question: Show the number of customer cards., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards."
    },
    {
        "instruction": "question: How many customer cards are there?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards."
    },
    {
        "instruction": "question: Show ids, customer ids, card type codes, card numbers for all cards., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards."
    },
    {
        "instruction": "question: What are card ids, customer ids, card types, and card numbers for each customer card?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards."
    },
    {
        "instruction": "question: Show the date valid from and the date valid to for the card with card number '4560596484842'., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"."
    },
    {
        "instruction": "question: What are the valid from and valid to dates for the card with the number 4560596484842?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"."
    },
    {
        "instruction": "question: What is the first name, last name, and phone of the customer with card 4560596484842., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"."
    },
    {
        "instruction": "question: Return the full name and phone of the customer who has card number 4560596484842., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"."
    },
    {
        "instruction": "question: How many cards does customer Art Turcotte have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Art), c2: customer_last_name (Turcotte), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"."
    },
    {
        "instruction": "question: Count the number of cards the customer with the first name Art and last name Turcotte has., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Art), c2: customer_last_name (Turcotte), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"."
    },
    {
        "instruction": "question: How many debit cards do we have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code (Debit), c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"."
    },
    {
        "instruction": "question: Count the number of customer cards of the type Debit., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code (Debit), c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"."
    },
    {
        "instruction": "question: How many credit cards does customer Blanche Huels have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Blanche), c2: customer_last_name (Huels), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code (Credit), c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"."
    },
    {
        "instruction": "question: Count the number of credit cards that the customer with first name Blanche and last name Huels has., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name (Blanche), c2: customer_last_name (Huels), c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code (Credit), c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"."
    },
    {
        "instruction": "question: Show all customer ids and the number of cards owned by each customer., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id."
    },
    {
        "instruction": "question: What are the different customer ids, and how many cards does each one hold?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id."
    },
    {
        "instruction": "question: What is the customer id with most number of cards, and how many does he have?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the id of the customer who has the most cards, as well as the number of cards., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show id, first and last names for all customers with at least two cards., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What are the ids and full names of customers who hold two or more cards?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What is the customer id, first and last name with least number of accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: Return the id and full name of the customer who has the fewest accounts., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: Show all card type codes and the number of cards in each type., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code."
    },
    {
        "instruction": "question: What are the different card types, and how many cards are there of each?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code."
    },
    {
        "instruction": "question: What is the card type code with most number of cards?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the code of the card type that is most common., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show card type codes with at least 5 cards., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5."
    },
    {
        "instruction": "question: What are the codes of card types that have 5 or more cards?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5."
    },
    {
        "instruction": "question: Show all card type codes and the number of customers holding cards in each type., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code."
    },
    {
        "instruction": "question: What are the different card type codes, and how many different customers hold each type?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code."
    },
    {
        "instruction": "question: Show the customer ids and firstname without a credit card., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code (Credit), c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"."
    },
    {
        "instruction": "question: What are the ids and first names of customers who do not hold a credit card?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code (Credit), c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"."
    },
    {
        "instruction": "question: Show all card type codes., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT DISTINCT card_type_code FROM Customers_Cards."
    },
    {
        "instruction": "question: What are the different card type codes?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT DISTINCT card_type_code FROM Customers_Cards."
    },
    {
        "instruction": "question: Show the number of card types., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards."
    },
    {
        "instruction": "question: How many different card types are there?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards."
    },
    {
        "instruction": "question: Show all transaction types., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT DISTINCT transaction_type FROM Financial_Transactions."
    },
    {
        "instruction": "question: What are the different types of transactions?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT DISTINCT transaction_type FROM Financial_Transactions."
    },
    {
        "instruction": "question: Show the number of transaction types., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions."
    },
    {
        "instruction": "question: How many different types of transactions are there?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions."
    },
    {
        "instruction": "question: What is the average and total transaction amount?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions."
    },
    {
        "instruction": "question: Return the average transaction amount, as well as the total amount of all transactions., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions."
    },
    {
        "instruction": "question: Show the card type codes and the number of transactions., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code."
    },
    {
        "instruction": "question: What are the different card types, and how many transactions have been made with each?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code."
    },
    {
        "instruction": "question: Show the transaction type and the number of transactions., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type."
    },
    {
        "instruction": "question: What are the different transaction types, and how many transactions of each have taken place?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type."
    },
    {
        "instruction": "question: What is the transaction type that has processed the greatest total amount in transactions?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the type of transaction with the highest total amount., database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the account id and the number of transactions for each account, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id."
    },
    {
        "instruction": "question: What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?, database: Database: customers_card_transactions. t0: accounts(c0: account_id, c1: customer_id, c2: account_name, c3: other_account_details). t1: customers(c0: customer_id, c1: customer_first_name, c2: customer_last_name, c3: customer_address, c4: customer_phone, c5: customer_email, c6: other_customer_details). t2: customers_cards(c0: card_id, c1: customer_id, c2: card_type_code, c3: card_number, c4: date_valid_from, c5: date_valid_to, c6: other_card_details). t3: financial_transactions(c0: transaction_id, c1: previous_transaction_id, c2: account_id, c3: card_id, c4: transaction_type, c5: transaction_date, c6: transaction_amount, c7: transaction_comment, c8: other_transaction_details).",
        "input": "",
        "output": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id."
    },
    {
        "instruction": "question: How many tracks do we have?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT count(*) FROM track."
    },
    {
        "instruction": "question: Count the number of tracks., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT count(*) FROM track."
    },
    {
        "instruction": "question: Show the name and location for all tracks., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  LOCATION FROM track."
    },
    {
        "instruction": "question: What are the names and locations of all tracks?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  LOCATION FROM track."
    },
    {
        "instruction": "question: Show names and seatings, ordered by seating for all tracks opened after 2000., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating."
    },
    {
        "instruction": "question: What are the names and seatings for all tracks opened after 2000, ordered by seating?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating."
    },
    {
        "instruction": "question: What is the name, location and seating for the most recently opened track?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the name, location, and seating of the track that was opened in the most recent year., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the minimum, maximum, and average seating for all tracks., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track."
    },
    {
        "instruction": "question: Return the minimum, maximum, and average seating across all tracks., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track."
    },
    {
        "instruction": "question: Show the name, location, open year for all tracks with a seating higher than the average., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)."
    },
    {
        "instruction": "question: What are the names, locations, and years of opening for tracks with seating higher than average?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)."
    },
    {
        "instruction": "question: What are distinct locations where tracks are located?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT DISTINCT LOCATION FROM track."
    },
    {
        "instruction": "question: Give the different locations of tracks., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT DISTINCT LOCATION FROM track."
    },
    {
        "instruction": "question: How many races are there?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT count(*) FROM race."
    },
    {
        "instruction": "question: Count the number of races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT count(*) FROM race."
    },
    {
        "instruction": "question: What are the distinct classes that races can have?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT DISTINCT CLASS FROM race."
    },
    {
        "instruction": "question: Return the different classes of races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT DISTINCT CLASS FROM race."
    },
    {
        "instruction": "question: Show name, class, and date for all races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  CLASS ,  date FROM race."
    },
    {
        "instruction": "question: What are the names, classes, and dates for all races?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name ,  CLASS ,  date FROM race."
    },
    {
        "instruction": "question: Show the race class and number of races in each class., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS."
    },
    {
        "instruction": "question: What are the different classes of races, and how many races correspond to each?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS."
    },
    {
        "instruction": "question: What is the race class with most number of races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Give the class of races that is most common., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: List the race class with at least two races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What are the classes of races that have two or more corresponding races?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What are the names for tracks without a race in class 'GT'., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class (GT), c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'."
    },
    {
        "instruction": "question: Give the names of tracks that do not have a race in the class 'GT'., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class (GT), c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'."
    },
    {
        "instruction": "question: Show all track names that have had no races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)."
    },
    {
        "instruction": "question: Return the names of tracks that have no had any races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)."
    },
    {
        "instruction": "question: Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000."
    },
    {
        "instruction": "question: What are the years of opening for tracks with seating between 4000 and 5000?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000."
    },
    {
        "instruction": "question: Show the name of track and the number of races in each track., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id."
    },
    {
        "instruction": "question: What are the names of different tracks, and how many races has each had?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id."
    },
    {
        "instruction": "question: Show the name of track with most number of races., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the name of the track that has had the greatest number of races?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Show the name and date for each race and its track name., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id."
    },
    {
        "instruction": "question: What are the names and dates of races, and the names of the tracks where they are held?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id."
    },
    {
        "instruction": "question: Show the name and location of track with 1 race., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1."
    },
    {
        "instruction": "question: What are the names and locations of tracks that have had exactly 1 race?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1."
    },
    {
        "instruction": "question: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats., database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000."
    },
    {
        "instruction": "question: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?, database: Database: race_track. t0: race(c0: race_id, c1: name, c2: class, c3: date, c4: track_id) (c4) refers to t1(c0). t1: track(c0: track_id, c1: name, c2: location, c3: seating, c4: year_opened).",
        "input": "",
        "output": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000."
    },
    {
        "instruction": "question: How many members have the black membership card?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card (Black), c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'."
    },
    {
        "instruction": "question: Find the number of members living in each address., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) ,  address FROM member GROUP BY address."
    },
    {
        "instruction": "question: Give me the names of members whose address is in Harford or Waterbury., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address (Waterbury)). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'."
    },
    {
        "instruction": "question: Find the ids and names of members who are under age 30 or with black membership card., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card (Black), c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30."
    },
    {
        "instruction": "question: Find the purchase time, age and address of each member, and show the results in the order of purchase time., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase."
    },
    {
        "instruction": "question: Which membership card has more than 5 members?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5."
    },
    {
        "instruction": "question: Which address has both members younger than 30 and members older than 40?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40."
    },
    {
        "instruction": "question: What is the membership card held by both members living in Hartford and ones living in Waterbury address?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address (Hartford, Waterbury)). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'."
    },
    {
        "instruction": "question: How many members are not living in Hartford?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address (Hartford)). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM member WHERE address != 'Hartford'."
    },
    {
        "instruction": "question: Which address do not have any member with the black membership card?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card (Black), c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'."
    },
    {
        "instruction": "question: Show the shop addresses ordered by their opening year., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT address FROM shop ORDER BY open_year."
    },
    {
        "instruction": "question: What are the average score and average staff number of all shops?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT avg(num_of_staff) ,  avg(score) FROM shop."
    },
    {
        "instruction": "question: Find the id and address of the shops whose score is below the average score., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)."
    },
    {
        "instruction": "question: Find the address and staff number of the shops that do not have any happy hour., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)."
    },
    {
        "instruction": "question: What are the id and address of the shops which have a happy hour in May?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month (May), c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'."
    },
    {
        "instruction": "question: which shop has happy hour most frequently? List its id and number of happy hours., database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which month has the most happy hours?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which months have more than 2 happy hours?, database: Database: coffee_shop. t0: shop(c0: shop_id, c1: address, c2: num_of_staff, c3: score, c4: open_year). t1: member(c0: member_id, c1: name, c2: membership_card, c3: age, c4: time_of_purchase, c5: level_of_membership, c6: address). t2: happy_hour(c0: hh_id, c1: shop_id, c2: month, c3: num_of_shaff_in_charge) (c1) refers to t0(c0). t3: happy_hour_member(c0: hh_id, c1: member_id, c2: total_amount) (c1) refers to t1(c0).",
        "input": "",
        "output": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2."
    },
    {
        "instruction": "question: How many albums are there?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT count(*) FROM ALBUM."
    },
    {
        "instruction": "question: Find the number of albums., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT count(*) FROM ALBUM."
    },
    {
        "instruction": "question: List the names of all music genres., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name (Music)). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM GENRE."
    },
    {
        "instruction": "question: What are the names of different music genres?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name (Music)). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM GENRE."
    },
    {
        "instruction": "question: Find all the customer information in state NY., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state (NY), c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate (NY), c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"."
    },
    {
        "instruction": "question: What is all the customer information for customers in NY state?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state (NY), c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate (NY), c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"."
    },
    {
        "instruction": "question: What are the first names and last names of the employees who live in Calgary city., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city (Calgary), c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"."
    },
    {
        "instruction": "question: Find the full names of employees living in the city of Calgary., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city (Calgary), c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"."
    },
    {
        "instruction": "question: What are the distinct billing countries of the invoices?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT distinct(BillingCountry) FROM INVOICE."
    },
    {
        "instruction": "question: Find the different billing countries for all invoices., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT distinct(BillingCountry) FROM INVOICE."
    },
    {
        "instruction": "question: Find the names of all artists that have \"a\" in their names., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"."
    },
    {
        "instruction": "question: What are the names of artist who have the letter 'a' in their names?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"."
    },
    {
        "instruction": "question: Find the title of all the albums of the artist \"AC/DC\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name (AC/DC)). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer (AC/DC), c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"."
    },
    {
        "instruction": "question: What are the titles of albums by the artist \"AC/DC\"?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name (AC/DC)). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer (AC/DC), c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"."
    },
    {
        "instruction": "question: Hom many albums does the artist \"Metallica\" have?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name (Metallica)). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer (Metallica), c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"."
    },
    {
        "instruction": "question: Find the number of albums by the artist \"Metallica\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name (Metallica)). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer (Metallica), c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"."
    },
    {
        "instruction": "question: Which artist does the album \"Balls to the Wall\" belong to?, database: Database: chinook_1. t0: album(c0: albumid, c1: title (Balls to the Wall), c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Balls to the Wall, Belong), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"."
    },
    {
        "instruction": "question: Find the name of the artist who made the album \"Balls to the Wall\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title (Balls to the Wall), c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Balls to the Wall), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"."
    },
    {
        "instruction": "question: Which artist has the most albums?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (The Moth), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the name of the artist with the greatest number of albums?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the names of all the tracks that contain the word \"you\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (World)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (The Worm), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'."
    },
    {
        "instruction": "question: What are the names of tracks that contain the the word you in them?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (World)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (The Worm), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'."
    },
    {
        "instruction": "question: What is the average unit price of all the tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(UnitPrice) FROM TRACK."
    },
    {
        "instruction": "question: Find the average unit price for a track., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(UnitPrice) FROM TRACK."
    },
    {
        "instruction": "question: What are the durations of the longest and the shortest tracks in milliseconds?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK."
    },
    {
        "instruction": "question: Find the maximum and minimum durations of tracks in milliseconds., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK."
    },
    {
        "instruction": "question: Show the album names, ids and the number of tracks for each album., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID."
    },
    {
        "instruction": "question: What are the names and ids of the different albums, and how many tracks are on each?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID."
    },
    {
        "instruction": "question: What is the name of the most common genre in all tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (The Moth), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the name of the genre that is most frequent across all tracks., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the least common media type in all tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: What is the name of the media type that is least common across all tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1."
    },
    {
        "instruction": "question: Show the album names and ids for albums that contain tracks with unit price bigger than 1., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID."
    },
    {
        "instruction": "question: What are the titles and ids for albums containing tracks with unit price greater than 1?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID."
    },
    {
        "instruction": "question: How many tracks belong to rock genre?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Rock)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Belong), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"."
    },
    {
        "instruction": "question: Count the number of tracks that are part of the rock genre., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Rock)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"."
    },
    {
        "instruction": "question: What is the average unit price of tracks that belong to Jazz genre?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Jazz)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Belong), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"."
    },
    {
        "instruction": "question: Find the average unit price of jazz tracks., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Jazz)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"."
    },
    {
        "instruction": "question: What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email (luisg@embraer.com.br), c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Coma), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"."
    },
    {
        "instruction": "question: Find the full name of the customer with the email \"luisg@embraer.com.br\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email (luisg@embraer.com.br), c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Coma), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"."
    },
    {
        "instruction": "question: How many customers have email that contains \"gmail.com\"?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Coma), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"."
    },
    {
        "instruction": "question: Count the number of customers that have an email containing \"gmail.com\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers, Coma), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"."
    },
    {
        "instruction": "question: What is the first name and last name employee helps the customer with first name Leonie?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname (Leonie), c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"."
    },
    {
        "instruction": "question: Find the full names of employees who help customers with the first name Leonie., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname (Leonie), c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"."
    },
    {
        "instruction": "question: What city does the employee who helps the customer with postal code 70174 live in?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"."
    },
    {
        "instruction": "question: Find the cities corresponding to employees who help customers with the postal code 70174., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"."
    },
    {
        "instruction": "question: How many distinct cities does the employees live in?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE."
    },
    {
        "instruction": "question: Find the number of different cities that employees live in., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE."
    },
    {
        "instruction": "question: Find all invoice dates corresponding to customers with first name Astrid and last name Gruber., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname (Astrid), c2: lastname (Gruber), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"."
    },
    {
        "instruction": "question: What are the invoice dates for customers with the first name Astrid and the last name Gruber?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname (Astrid), c2: lastname (Gruber), c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"."
    },
    {
        "instruction": "question: Find all the customer last names that do not have invoice totals larger than 20., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20."
    },
    {
        "instruction": "question: What are the last names of customers without invoice totals exceeding 20?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20."
    },
    {
        "instruction": "question: Find the first names of all customers that live in Brazil and have an invoice., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country (Brazil), c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry (Brazil), c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"."
    },
    {
        "instruction": "question: What are the different first names for customers from Brazil who have also had an invoice?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country (Brazil), c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry (Brazil), c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"."
    },
    {
        "instruction": "question: Find the address of all customers that live in Germany and have invoice., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country (Germany), c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry (Germany), c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"."
    },
    {
        "instruction": "question: What are the addresses of customers living in Germany who have had an invoice?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country (Germany), c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry (Germany), c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"."
    },
    {
        "instruction": "question: List the phone numbers of all employees., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Phone FROM EMPLOYEE."
    },
    {
        "instruction": "question: What are the phone numbers for each employee?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Phone FROM EMPLOYEE."
    },
    {
        "instruction": "question: How many tracks are in the AAC audio file media type?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name (AAC audio file)). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"."
    },
    {
        "instruction": "question: Count the number of tracks that are of the media type \"AAC audio file\"., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name (AAC audio file)). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"."
    },
    {
        "instruction": "question: What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?, database: Database: chinook_1. t0: album(c0: albumid, c1: title (Pop), c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Latin, Pop)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Belong), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"."
    },
    {
        "instruction": "question: Find the average millisecond length of Latin and Pop tracks., database: Database: chinook_1. t0: album(c0: albumid, c1: title (Pop), c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Latin, Pop)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"."
    },
    {
        "instruction": "question: Please show the employee first names and ids of employees who serve at least 10 customers., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Please), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10."
    },
    {
        "instruction": "question: What are the first names and support rep ids for employees serving 10 or more customers?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10."
    },
    {
        "instruction": "question: Please show the employee last names that serves no more than 20 customers., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Please), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20."
    },
    {
        "instruction": "question: What are the last names of employees who serve at most 20 customers?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20."
    },
    {
        "instruction": "question: Please list all album titles in alphabetical order., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Please), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Title FROM ALBUM ORDER BY Title."
    },
    {
        "instruction": "question: What are all the album titles, in alphabetical order?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Title FROM ALBUM ORDER BY Title."
    },
    {
        "instruction": "question: Please list the name and id of all artists that have at least 3 albums in alphabetical order., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Please), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name."
    },
    {
        "instruction": "question: What are the names and ids of artists with 3 or more albums, listed in alphabetical order?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name."
    },
    {
        "instruction": "question: Find the names of artists that do not have any albums., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId."
    },
    {
        "instruction": "question: What are the names of artists who have not released any albums?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Release), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId."
    },
    {
        "instruction": "question: What is the average unit price of rock tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Rock)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"."
    },
    {
        "instruction": "question: Find the average unit price of tracks from the Rock genre., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Rock)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"."
    },
    {
        "instruction": "question: What are the duration of the longest and shortest pop tracks in milliseconds?, database: Database: chinook_1. t0: album(c0: albumid, c1: title (Pop), c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Pop)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"."
    },
    {
        "instruction": "question: Find the maximum and minimum millisecond lengths of pop tracks., database: Database: chinook_1. t0: album(c0: albumid, c1: title (Pop), c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Pop)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"."
    },
    {
        "instruction": "question: What are the birth dates of employees living in Edmonton?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city (Edmonton), c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city (Edmonton), c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity (Edmonton), c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"."
    },
    {
        "instruction": "question: Find the birth dates corresponding to employees who live in the city of Edmonton., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city (Edmonton), c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city (Edmonton), c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity (Edmonton), c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"."
    },
    {
        "instruction": "question: What are the distinct unit prices of all tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT distinct(UnitPrice) FROM TRACK."
    },
    {
        "instruction": "question: Find the distinct unit prices for tracks., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT distinct(UnitPrice) FROM TRACK."
    },
    {
        "instruction": "question: How many artists do not have any album?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)."
    },
    {
        "instruction": "question: Cound the number of artists who have not released an album., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name (Release, Numbers), c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)."
    },
    {
        "instruction": "question: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?, database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Reggae, Rock)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'."
    },
    {
        "instruction": "question: Find the titles of albums that contain tracks of both the Reggae and Rock genres., database: Database: chinook_1. t0: album(c0: albumid, c1: title, c2: artistid). t1: artist(c0: artistid, c1: name). t2: customer(c0: customerid, c1: firstname, c2: lastname, c3: company, c4: address, c5: city, c6: state, c7: country, c8: postalcode, c9: phone, c10: fax, c11: email, c12: supportrepid). t3: employee(c0: employeeid, c1: lastname, c2: firstname, c3: title, c4: reportsto, c5: birthdate, c6: hiredate, c7: address, c8: city, c9: state, c10: country, c11: postalcode, c12: phone, c13: fax, c14: email). t4: genre(c0: genreid, c1: name (Reggae, Rock)). t5: invoice(c0: invoiceid, c1: customerid, c2: invoicedate, c3: billingaddress, c4: billingcity, c5: billingstate, c6: billingcountry, c7: billingpostalcode, c8: total). t6: invoiceline(c0: invoicelineid, c1: invoiceid, c2: trackid, c3: unitprice, c4: quantity). t7: mediatype(c0: mediatypeid, c1: name). t8: playlist(c0: playlistid, c1: name). t9: playlisttrack(c0: playlistid, c1: trackid). t10: track(c0: trackid, c1: name, c2: albumid, c3: mediatypeid, c4: genreid, c5: composer, c6: milliseconds, c7: bytes, c8: unitprice).",
        "input": "",
        "output": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'."
    },
    {
        "instruction": "question: Find all the phone numbers., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_phone FROM available_policies."
    },
    {
        "instruction": "question: What are all the phone numbers?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_phone FROM available_policies."
    },
    {
        "instruction": "question: What are the customer phone numbers under the policy \"Life Insurance\"?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code (Life Insurance), c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"."
    },
    {
        "instruction": "question: What are the phone numbers of customers using the policy with the code \"Life Insurance\"?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code (Life Insurance), c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"."
    },
    {
        "instruction": "question: Which policy type has the most records in the database?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which policy type appears most frequently in the available policies?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are all the customer phone numbers under the most popular policy type?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)."
    },
    {
        "instruction": "question: Find the phone numbers of customers using the most common policy type among the available policies., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)."
    },
    {
        "instruction": "question: Find the policy type used by more than 4 customers., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4."
    },
    {
        "instruction": "question: Find the policy types more than 4 customers use. Show their type code., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4."
    },
    {
        "instruction": "question: Find the total and average amount of settlements., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements."
    },
    {
        "instruction": "question: Return the sum and average of all settlement amounts., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements."
    },
    {
        "instruction": "question: Find the name of services that have been used for more than 2 times in first notification of loss., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2."
    },
    {
        "instruction": "question: Which services have been used more than twice in first notification of loss? Return the service name., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2."
    },
    {
        "instruction": "question: What is the effective date of the claim that has the largest amount of total settlement?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the claim that has the largest total settlement amount. Return the effective date of the claim., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many policies are listed for the customer named \"Dayana Robel\"?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name (Dayana Robel)). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"."
    },
    {
        "instruction": "question: Count the total number of policies used by the customer named \"Dayana Robel\"., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name (Dayana Robel)). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"."
    },
    {
        "instruction": "question: What is the name of the customer who has the most policies listed?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: Which customer uses the most policies? Give me the customer name., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are all the policy types of the customer named \"Dayana Robel\"?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name (Dayana Robel)). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"."
    },
    {
        "instruction": "question: Tell me the types of the policy used by the customer named \"Dayana Robel\"., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name (Dayana Robel)). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"."
    },
    {
        "instruction": "question: What are all the policy types of the customer that has the most policies listed?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)."
    },
    {
        "instruction": "question: List all the policy types used by the customer enrolled in the most policies., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)."
    },
    {
        "instruction": "question: List all the services in the alphabetical order., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT service_name FROM services ORDER BY service_name."
    },
    {
        "instruction": "question: Give me a list of all the service names sorted alphabetically., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT service_name FROM services ORDER BY service_name."
    },
    {
        "instruction": "question: How many services are there?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT count(*) FROM services."
    },
    {
        "instruction": "question: Count the total number of available services., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT count(*) FROM services."
    },
    {
        "instruction": "question: Find the names of users who do not have a first notification of loss record., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id."
    },
    {
        "instruction": "question: Which customers do not have a first notification of loss record? Give me the customer names., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id."
    },
    {
        "instruction": "question: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\"., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name (Upgrade a policy, Close a policy)). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"."
    },
    {
        "instruction": "question: Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name (Upgrade a policy, Close a policy)). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"."
    },
    {
        "instruction": "question: Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\"., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name (New policy application, Close a policy)). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"."
    },
    {
        "instruction": "question: Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name (Upgrade a policy, Close a policy)). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"."
    },
    {
        "instruction": "question: Find the IDs of customers whose name contains \"Diana\"., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"."
    },
    {
        "instruction": "question: What are the IDs of customers who have \"Diana\" in part of their names?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"."
    },
    {
        "instruction": "question: What are the maximum and minimum settlement amount on record?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements."
    },
    {
        "instruction": "question: Find the maximum and minimum settlement amount., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements."
    },
    {
        "instruction": "question: List all the customers in increasing order of IDs., database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC."
    },
    {
        "instruction": "question: What is the ordered list of customer ids?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC."
    },
    {
        "instruction": "question: Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\", database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"."
    },
    {
        "instruction": "question: What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?, database: Database: insurance_fnol. t0: customers(c0: customer_id, c1: customer_name). t1: services(c0: service_id, c1: service_name). t2: available_policies(c0: policy_id, c1: policy_type_code, c2: customer_phone). t3: customers_policies(c0: customer_id, c1: policy_id, c2: date_opened, c3: date_closed). t4: first_notification_of_loss(c0: fnol_id, c1: customer_id, c2: policy_id, c3: service_id). t5: claims(c0: claim_id, c1: fnol_id, c2: effective_date). t6: settlements(c0: settlement_id, c1: claim_id, c2: effective_date, c3: settlement_amount).",
        "input": "",
        "output": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"."
    },
    {
        "instruction": "question: How many kinds of enzymes are there?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM enzyme."
    },
    {
        "instruction": "question: What is the total count of enzymes?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM enzyme."
    },
    {
        "instruction": "question: List the name of enzymes in descending lexicographical order., database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM enzyme ORDER BY name DESC."
    },
    {
        "instruction": "question: What are the names of enzymes in descending order?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM enzyme ORDER BY name DESC."
    },
    {
        "instruction": "question: List the names and the locations that the enzymes can make an effect., database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  LOCATION FROM enzyme."
    },
    {
        "instruction": "question: What are the names and locations of all enzymes listed?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  LOCATION FROM enzyme."
    },
    {
        "instruction": "question: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT max(OMIM) FROM enzyme."
    },
    {
        "instruction": "question: What is the maximum OMIM value in the database?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT max(OMIM) FROM enzyme."
    },
    {
        "instruction": "question: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location (Cytosol), c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'."
    },
    {
        "instruction": "question: What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location (Cytosol), c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'."
    },
    {
        "instruction": "question: What are the names of enzymes who does not produce 'Heme'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product (Heme), c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM enzyme WHERE product != 'Heme'."
    },
    {
        "instruction": "question: What are the names of enzymes whose product is not 'Heme'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product (Heme), c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM enzyme WHERE product != 'Heme'."
    },
    {
        "instruction": "question: What are the names and trade names of the medicines which has 'Yes' value in the FDA record?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved (Yes)). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'."
    },
    {
        "instruction": "question: What are the names and trade names of the medcines that are FDA approved?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'."
    },
    {
        "instruction": "question: What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name (Amisulpride), c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type (inhibitor)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'."
    },
    {
        "instruction": "question: What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name (Amisulpride), c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type (inhibitor)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'."
    },
    {
        "instruction": "question: What are the ids and names of the medicine that can interact with two or more enzymes?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: For every medicine id, what are the names of the medicines that can interact with more than one enzyme?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2."
    },
    {
        "instruction": "question: What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with., database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC."
    },
    {
        "instruction": "question: What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC."
    },
    {
        "instruction": "question: What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the id and name of the enzyme that can interact with the most medicines as an activator?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name (Aripiprazole), c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name (ALA synthase), c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'."
    },
    {
        "instruction": "question: What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name (Aripiprazole), c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name (ALA synthase), c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'."
    },
    {
        "instruction": "question: What is the most common interaction type between enzymes and medicine? And how many are there?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: What are the most common types of interactions between enzymes and medicine, and how many types are there?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1."
    },
    {
        "instruction": "question: How many medicines have the FDA approval status 'No' ?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved (No)). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'."
    },
    {
        "instruction": "question: How many medicines were not approved by the FDA?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'."
    },
    {
        "instruction": "question: How many enzymes do not have any interactions?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )."
    },
    {
        "instruction": "question: What is the count of enzymes without any interactions?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )."
    },
    {
        "instruction": "question: What is the id and trade name of the medicines can interact with at least 3 enzymes?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3."
    },
    {
        "instruction": "question: What are the ids and trade names of the medicine that can interact with at least 3 enzymes?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3."
    },
    {
        "instruction": "question: What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type (inhibitor)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'."
    },
    {
        "instruction": "question: What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type (inhibitor)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'."
    },
    {
        "instruction": "question: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes., database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type (activitor, inhibitor)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'."
    },
    {
        "instruction": "question: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type (activitor, inhibitor)) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'."
    },
    {
        "instruction": "question: Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'., database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product (Heme), c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'."
    },
    {
        "instruction": "question: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product (Heme), c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'."
    },
    {
        "instruction": "question: How many distinct FDA approval statuses are there for the medicines?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT FDA_approved) FROM medicine."
    },
    {
        "instruction": "question: How many different FDA approval statuses exist for medicines?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT count(DISTINCT FDA_approved) FROM medicine."
    },
    {
        "instruction": "question: Which enzyme names have the substring \"ALA\"?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"."
    },
    {
        "instruction": "question: What are the names of enzymes that include the string 'ALA'?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"."
    },
    {
        "instruction": "question: find the number of medicines offered by each trade., database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name."
    },
    {
        "instruction": "question: How many medicines are offered by each trade name?, database: Database: medicine_enzyme_interaction. t0: medicine(c0: id, c1: name, c2: trade_name, c3: fda_approved). t1: enzyme(c0: id, c1: name, c2: location, c3: product, c4: chromosome, c5: omim, c6: porphyria). t2: medicine_enzyme_interaction(c0: enzyme_id, c1: medicine_id, c2: interaction_type) (c1) refers to t0(c0), (c0) refers to t1(c0).",
        "input": "",
        "output": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name."
    },
    {
        "instruction": "question: List all schools and their nicknames in the order of founded year., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT school ,  nickname FROM university ORDER BY founded."
    },
    {
        "instruction": "question: What are the different schools and their nicknames, ordered by their founding years?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT school ,  nickname FROM university ORDER BY founded."
    },
    {
        "instruction": "question: List all public schools and their locations., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation (Public), c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'."
    },
    {
        "instruction": "question: What are the public schools and what are their locations?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation (Public), c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'."
    },
    {
        "instruction": "question: When was the school with the largest enrollment founded?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the founded year for the school with the largest enrollment., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1."
    },
    {
        "instruction": "question: Find the founded year of the newest non public school., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation (Public), c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the founded year of the non public school that was founded most recently?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation (Public), c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1."
    },
    {
        "instruction": "question: How many schools are in the basketball match?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT count(DISTINCT school_id) FROM basketball_match."
    },
    {
        "instruction": "question: Count the number of schools that have had basketball matches., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT count(DISTINCT school_id) FROM basketball_match."
    },
    {
        "instruction": "question: What is the highest acc percent score in the competition?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1."
    },
    {
        "instruction": "question: Return the highest acc percent across all basketball matches., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1."
    },
    {
        "instruction": "question: What is the primary conference of the school that has the lowest acc percent score in the competition?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1."
    },
    {
        "instruction": "question: Return the primary conference of the school with the lowest acc percentage score., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1."
    },
    {
        "instruction": "question: What is the team name and acc regular season score of the school that was founded for the longest time?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1."
    },
    {
        "instruction": "question: Return the name of the team and the acc during the regular season for the school that was founded the earliest., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1."
    },
    {
        "instruction": "question: Find the location and all games score of the school that has Clemson as its team name., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name (Clemson), c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'."
    },
    {
        "instruction": "question: What are the all games score and location of the school called Clemson?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name (Clemson), c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'."
    },
    {
        "instruction": "question: What are the average enrollment size of the universities that are founded before 1850?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT avg(enrollment) FROM university WHERE founded  <  1850."
    },
    {
        "instruction": "question: Return the average enrollment of universities founded before 1850., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT avg(enrollment) FROM university WHERE founded  <  1850."
    },
    {
        "instruction": "question: Show the enrollment and primary_conference of the oldest college., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1."
    },
    {
        "instruction": "question: What are the enrollment and primary conference for the university which was founded the earliest?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1."
    },
    {
        "instruction": "question: What is the total and minimum enrollment of all schools?, database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT sum(enrollment) ,  min(enrollment) FROM university."
    },
    {
        "instruction": "question: Return the total and minimum enrollments across all schools., database: Database: university_basketball. t0: basketball_match(c0: team_id, c1: school_id, c2: team_name, c3: acc_regular_season, c4: acc_percent, c5: acc_home, c6: acc_road, c7: all_games, c8: all_games_percent, c9: all_home, c10: all_road, c11: all_neutral) (c1) refers to t1(c0). t1: university(c0: school_id, c1: school, c2: location, c3: founded, c4: affiliation, c5: enrollment, c6: nickname, c7: primary_conference).",
        "input": "",
        "output": "SELECT sum(enrollment) ,  min(enrollment) FROM university."
    }
]